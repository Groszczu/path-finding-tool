{"version":3,"sources":["shared/GridContainer.js","features/nodes/NodeTypes.js","features/nodes/Node.jsx","features/nodes/nodeHelpers.js","features/nodes/nodesSlice.js","features/mouse/mouseSlice.js","util/alghorithms/dijkstra.js","shared/Button.js","features/nodes/useNodesSlice.js","features/nodes/Nodes.jsx","features/nodes/ResetButton.jsx","shared/Container.js","shared/TitleHeader.js","features/tools/toolsSlice.js","features/tools/ToolBar.jsx","features/nodes/ClearButton.jsx","features/tools/FullscreenButton.jsx","app/App.js","serviceWorker.js","app/store.js","index.js"],"names":["GridContainer","styled","div","props","columns","css","rows","fullscreen","NodeTypes","empty","wall","visited","result","start","end","changableTypes","toolTypes","isToolType","type","includes","nodeTypeColor","nodeTypeStyle","Square","span","attrs","delay","style","gridColumnStart","x","gridRowStart","y","gridColumnEnd","gridRowEnd","transitionDelay","Node","node","animationFrameDuration","onMouseDown","onMouseOver","visitedIndex","createEmptyNodes","cols","Array","fill","map","_","row","col","areEqual","node1","node2","validateNodeTypeChange","startNode","endNode","newType","validateNodeChange","defaultState","nodes","middleNodeY","Math","floor","length","middleNodeX","initNodesState","nodesSlice","createSlice","name","initialState","reducers","setNodeType","state","payload","setNodesType","setVisited","stateNode","setStartNode","setEndNode","clearNodes","forEach","resetNodes","actions","reducer","mouseSlice","require","mousePressed","mousePress","mouseRelease","dijkstra","unvisited","flat","filter","distance","Infinity","previousNode","i","sort","a","b","currentNode","moves","shift","abs","min","push","find","n","Button","button","primary","useSelector","useNodesSlice","Nodes","mouse","selectedTool","tools","toolType","dispatch","useDispatch","changeNodeTypeIfPressed","changeNodeType","action","getNodeChangeAction","bind","onMouseUp","key","onClick","Dijkstra","setTimeout","ResetButton","Container","TitleHeader","h1","toolsSlice","setToolType","toggleFullscreen","ToolBar","selected","backgroundColor","transform","margin","ClearButton","FullscreenButton","position","left","bottom","App","Boolean","window","location","hostname","match","nodesReducer","mouseReducer","toolsReducer","configureStore","middleware","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.116fcf71.chunk.js","sourcesContent":["import styled, { css } from 'styled-components';\n\nconst GridContainer = styled.div`\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(22px, 1fr));\n    grid-template-rows: repeat(auto-fill, minmax(22px, 1fr));\n    grid-gap: 1px;\n    margin: 0 auto;\n    overflow: auto;\n    background: var(--empty-node-clr);\n    padding: 10px;\n    border-radius: 10px;\n    user-select: none;\n\n    ${\n        props => props.columns && \n            css`grid-template-columns: repeat(${props.columns}, minmax(22px, 1fr));`\n    }\n\n    ${\n        props => props.rows && \n            css`grid-template-rows: repeat(${props.rows}, minmax(22px, 1fr));`\n    }\n\n    ${\n        props => props.fullscreen &&\n            css`\n                position: absolute;\n                left: 0;\n                top: 0;\n                height: 100vh;\n                width: 100vw;`\n    }\n`;\n\nexport default GridContainer;","\nconst NodeTypes = {\n  empty: 'empty_node',\n  wall: 'wall_node',\n  visited: 'visited_node',\n  result: 'result_node',\n  start: 'start_node',\n  end: 'end_node'\n};\n\nexport const changableTypes = [\n  NodeTypes.empty,\n  NodeTypes.wall,\n  NodeTypes.visited,\n  NodeTypes.result\n];\n\nexport const toolTypes = [\n  NodeTypes.empty,\n  NodeTypes.wall,\n  NodeTypes.start,\n  NodeTypes.end\n];\n\nexport function isChangableType(type) {\n  return changableTypes.includes(type);\n};\n\nexport function isToolType(type) {\n  return toolTypes.includes(type);\n} \n\nexport const nodeTypeColor = {\n  [NodeTypes.empty]: 'var(--empty-node-clr)',\n  [NodeTypes.wall]: 'var(--background-clr)',\n  [NodeTypes.visited]: 'var(--visited-node-clr)',\n  [NodeTypes.result]: 'var(--result-node-clr)',\n  [NodeTypes.start]: 'var(--start-node-clr)',\n  [NodeTypes.end]: 'var(--end-node-clr)',\n}\n\nexport const nodeTypeStyle = {\n  [NodeTypes.empty]: '',\n  [NodeTypes.wall]: `background: ${nodeTypeColor[NodeTypes.wall]};`,\n  [NodeTypes.visited]: `background: ${nodeTypeColor[NodeTypes.visited]};`,\n  [NodeTypes.result]: `background: ${nodeTypeColor[NodeTypes.result]};`,\n  [NodeTypes.start]: `background: ${nodeTypeColor[NodeTypes.start]}; box-shadow: 0px 0px 10px 5px rgba(9,135,0,1);`,\n  [NodeTypes.end]: `background: ${nodeTypeColor[NodeTypes.end]}; box-shadow: 0px 0px 10px 5px rgba(252,3,3,1);`,\n};\n\n\nexport default NodeTypes;","import React from 'react';\nimport styled from 'styled-components';\nimport { nodeTypeStyle } from './NodeTypes';\n\nconst Square = styled.span.attrs(({ delay, x, y }) => ({\n    style: {\n        gridColumnStart: x + 1,\n        gridRowStart: y + 1,\n        gridColumnEnd: 'span 1',\n        gridRowEnd: 'span 1',\n        transitionDelay: `${delay}ms`,\n    }\n}))`\n    width: 100%;\n    height: auto;\n    border: 1px solid var(--secondary-clr);\n    opacity: 0.8;\n    border-radius: 100%;\n    transition: background-color 1s;\n\n    ${props => nodeTypeStyle[props.type]}\n`;\n\nconst Node = ({ node, animationFrameDuration, onMouseDown, onMouseOver }) => {\n\n    return (\n        <Square\n            delay={node.visitedIndex * animationFrameDuration}\n            type={node.type}\n            x={node.x}\n            y={node.y}\n            onMouseDown={onMouseDown}\n            onMouseOver={onMouseOver}\n        />\n    );\n};\n\nexport default Node;","import NodeTypes, { isChangableType } from './NodeTypes';\nimport { setNodeType, setStartNode, setEndNode } from \"./nodesSlice\";\n\nexport function createEmptyNodes(cols, rows) {\n  return Array(rows).fill(0).map((_, row) =>\n    Array(cols).fill(0).map((_, col) => createEmptyNode(col, row)));\n}\n\nexport function createEmptyNode(x, y) {\n  return { x, y, type: NodeTypes.empty, visitedIndex: null };\n}\n\nexport function areEqual(node1, node2) {\n  if (!node1 || !node2) {\n    return false;\n  }\n  return node1.x === node2.x && node1.y === node2.y;\n}\n\nexport function neightbours(node1, node2) {\n  const xDistance = Math.abs(node1.x - node2.x);\n  const yDistance = Math.abs(node1.y - node2.y);\n  return xDistance + yDistance === 1;\n}\n\nexport function validateNodeTypeChange(node, startNode, endNode, newType) {\n    return validateNodeChange(node, startNode, endNode) && isChangableType(newType);\n\n}\nexport function validateNodeChange(node, startNode, endNode) {\n    return !areEqual(node, startNode) \n        && !areEqual(node, endNode);\n}\n\nexport function getNodeChangeAction(x, y, type) {\n  let action;\n  switch (type) {\n    case NodeTypes.empty:\n    case NodeTypes.wall:\n    case NodeTypes.visited:\n    case NodeTypes.result:\n      action = setNodeType({ x, y, type });\n      break;\n    case NodeTypes.start:\n      action = setStartNode({ x, y });\n      break;\n    case NodeTypes.end:\n      action = setEndNode({ x, y });\n      break;\n    default: break;\n  }\n  return action;\n};","import { createSlice } from '@reduxjs/toolkit';\nimport NodeTypes, { isToolType } from \"./NodeTypes\";\nimport { createEmptyNodes, validateNodeChange, validateNodeTypeChange } from './nodeHelpers';\n\n\n// Default state\nconst COLS = 40;\nconst ROWS = 30;\n\nfunction initNodesState(cols, rows) {\n    const nodes = createEmptyNodes(cols, rows);\n    const middleNodeY = Math.floor(nodes.length / 2);\n    const middleNodeX = Math.floor(nodes[0].length / 2);\n\n    const startNode = nodes[middleNodeY][middleNodeX];\n    const endNode = nodes[Math.floor(middleNodeY / 2)][middleNodeX];\n    startNode.type = NodeTypes.start;\n    endNode.type = NodeTypes.end;\n\n    return {\n        columns: cols,\n        rows,\n        nodes,\n        startNode,\n        endNode\n    };\n}\n\nconst defaultState = initNodesState(COLS, ROWS);\n\nconst nodesSlice = createSlice({\n    name: 'nodes',\n    initialState: defaultState,\n    reducers: {\n        setNodeType: (state, { payload }) => {\n            const { x, y, type } = payload;\n            const { startNode, endNode } = state;\n            if (validateNodeTypeChange(payload, startNode, endNode, type)) {\n                state.nodes[y][x].type = type;\n            }\n        },\n        setNodesType: (state, { payload }) => {\n            const { nodes, type } = payload;\n            const { startNode, endNode } = state;\n            for (const node of nodes) {\n                if (validateNodeTypeChange(node, startNode, endNode, type)) {\n                    state.nodes[node.y][node.x].type = type;\n                }\n            }\n        },\n        setVisited: (state, { payload }) => {\n            const { nodes } = payload;\n            const { startNode, endNode } = state;\n            for (const node of nodes) {\n                if (validateNodeChange(node, startNode, endNode)) {\n                    const stateNode = state.nodes[node.y][node.x];\n                    stateNode.visitedIndex = node.visitedIndex;\n                    stateNode.type = NodeTypes.visited;\n                }\n            }\n        },\n        setStartNode: (state, { payload }) => {\n            const { x, y } = payload;\n            const { startNode, endNode } = state;\n            if (validateNodeChange(payload, startNode, endNode)) {\n                state.nodes[startNode.y][startNode.x].type = NodeTypes.empty;\n                state.startNode = state.nodes[y][x];\n                state.startNode.type = NodeTypes.start;\n            }\n        },\n        setEndNode: (state, { payload }) => {\n            const { x, y } = payload;\n            const { startNode, endNode } = state;\n            if (validateNodeChange(payload, startNode, endNode)) {\n                state.nodes[endNode.y][endNode.x].type = NodeTypes.empty;\n                state.endNode = state.nodes[y][x];\n                state.endNode.type = NodeTypes.end;\n            }\n        },\n        clearNodes: ({ nodes }) => {\n            nodes.forEach(row => row.forEach(node => {\n                if (!isToolType(node.type))\n                    node.type = NodeTypes.empty;\n            }))\n        },\n        resetNodes: () => defaultState\n    }\n});\n\nconst { actions, reducer } = nodesSlice;\nexport const { setNodeType, setNodesType, setStartNode, setEndNode, clearNodes, resetNodes, setVisited } = actions;\nexport default reducer;","const { createSlice } = require(\"@reduxjs/toolkit\");\n\nconst initialState = {\n  mousePressed: false\n};\n\nconst mouseSlice = createSlice({\n  name: 'mouse',\n  initialState,\n  reducers: {\n    mousePress: (state) => { state.mousePressed = true },\n    mouseRelease: (state) => { state.mousePressed = false },\n  }\n});\n\nconst { reducer, actions } = mouseSlice;\nexport const { mousePress, mouseRelease } = actions;\nexport default reducer;","import { neightbours } from \"../../features/nodes/nodeHelpers\";\nimport NodeTypes from \"../../features/nodes/NodeTypes\";\n\nexport default function dijkstra(nodes) {\n\n  const visited = [];\n  let unvisited = nodes\n    .flat()\n    .filter(node => node.type !== NodeTypes.wall)\n    .map(node => ({\n    ...node,\n    distance: node.type === NodeTypes.start ? 0 : Infinity,\n    previousNode: null\n  }));\n\n  let i = 0;\n  for (; unvisited.length !== 0; i++) {\n    unvisited.sort((a, b) => a.distance - b.distance);\n    const currentNode = unvisited[0];\n    \n    // if lowest distance from start node in unvisited array equals Infinity\n    // it means there is no path from start to end, so we can end alghorithm\n    if (currentNode.distance === Infinity) {\n      return { visited, result: null, moves: i };\n    }\n\n    unvisited.shift(); //remove current node\n    unvisited = unvisited.map(node => {\n      return neightbours(currentNode, node) ?\n        {\n          ...node,\n          distance: Math.min(node.distance, currentNode.distance + 1), \n          previousNode: node.distance > currentNode.distance + 1 ? currentNode : node.previousNode\n        }\n        :\n        node;\n    });\n\n    visited.push({ ...currentNode, visitedIndex: i });\n    if (currentNode.type === NodeTypes.end) {\n      break;\n    }\n  }\n\n  const result = [];\n  const endNodeData = visited.find(n => n.type === NodeTypes.end);\n  for (let node = endNodeData.previousNode; node.type !== NodeTypes.start; node = node.previousNode ) {\n    result.push(node);\n  }\n\n  return { visited, result, moves: i };\n}","import styled from 'styled-components';\n\nconst Button = styled.button`\n  border-radius: 10px;\n  background-color: ${props => props.primary ? 'var(--primary-clr)' : 'var(--secondary-clr)'};\n  font-size: 1.5rem;\n  padding: .5em 1.5em;\n  margin: 2% auto 0 auto;\n  border: 2px solid ${props => props.primary ? 'var(--secondary-clr)' : 'var(--primary-clr)'};\n  cursor: pointer;\n\n  :hover {\n    opacity: 0.8;\n  }\n`;\n\nexport default Button;","const { useSelector } = require(\"react-redux\")\n\nconst useNodesSlice = () => {\n  const nodesData = useSelector(({ nodes }) => nodes);\n\n  return nodesData;\n};\n\nexport default useNodesSlice;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport GridContainer from '../../shared/GridContainer';\nimport Node from './Node';\nimport { setNodesType, setVisited } from './nodesSlice';\nimport { mousePress, mouseRelease } from '../mouse/mouseSlice';\nimport NodeTypes from './NodeTypes';\nimport Dijkstra from '../../util/alghorithms/dijkstra';\nimport Button from '../../shared/Button';\nimport useNodesSlice from './useNodesSlice';\nimport { getNodeChangeAction } from './nodeHelpers';\n\nconst Nodes = ({ animationFrameDuration }) => {\n\n    const mousePressed = useSelector(({ mouse }) => mouse.mousePressed);\n    const {\n        nodes,\n        columns,\n        rows,\n    } = useNodesSlice();\n    const selectedTool = useSelector(({ tools }) => tools.toolType);\n    const fullscreen = useSelector(({ tools }) => tools.fullscreen);\n\n    const dispatch = useDispatch();\n\n    const changeNodeTypeIfPressed = (node, type) => {\n        if (!mousePressed) return false;\n        changeNodeType(node, type);\n        return true;\n    };\n    const changeNodeType = (node, type) =>\n        dispatch(getNodeChangeAction(node.x, node.y, type));\n\n\n    const startPathfinding = () => {\n        const { visited, result, moves } = Dijkstra(nodes);\n        visited && dispatch(setVisited({ nodes: visited }));\n        result &&\n            setTimeout(() =>\n                dispatch(setNodesType({\n                    nodes: result,\n                    type: NodeTypes.result\n                })\n                )\n                , animationFrameDuration * moves);\n    };\n\n    return (\n        <>\n            <GridContainer fullscreen={fullscreen} columns={columns} rows={rows} onMouseDown={dispatch.bind(null, mousePress())} onMouseUp={dispatch.bind(null, mouseRelease())}>\n                {nodes.flat().map(node =>\n                    <Node\n                        key={`${node.x}_${node.y}`}\n                        animationFrameDuration={animationFrameDuration}\n                        node={node}\n                        onMouseDown={changeNodeType.bind(null, node, selectedTool)}\n                        onMouseOver={changeNodeTypeIfPressed.bind(null, node, selectedTool)} />)}\n            </GridContainer>\n            <Button onClick={startPathfinding}>Start</Button>\n        </>\n    );\n};\n\nexport default Nodes;","import React from 'react';\nimport Button from \"../../shared/Button\"\nimport { useDispatch } from 'react-redux';\nimport { resetNodes } from \"./nodesSlice\";\n\nconst ResetButton = () => {\n  const dispatch = useDispatch();\n  const reset = () => dispatch(resetNodes());\n  return <Button primary={true} onClick={reset}>Reset</Button>\n};\n\nexport default ResetButton;","import styled from 'styled-components';\n\nconst Container = styled.div`\n  margin: 0 auto;\n  width: 90%;\n  max-width: 1000px;\n  text-align: center;\n  border-radius: 10px;\n`;\n\nexport default Container;","import styled from 'styled-components';\n\nconst TitleHeader = styled.h1`\n  font-size: 3rem;\n  color: var(--text-clr);\n`;\n\nexport default TitleHeader;","import { createSlice } from '@reduxjs/toolkit';\nimport NodeTypes, { isToolType } from '../nodes/NodeTypes';\n\nconst initialState = {\n  toolType: NodeTypes.wall,\n  fullscreen: false\n};\n\nconst toolsSlice = createSlice({\n  name: 'tools',\n  initialState,\n  reducers: {\n    setToolType: (state, { payload }) => {\n      const { type } = payload;\n      if (isToolType(payload.type)) {\n        state.toolType = type;\n      }\n    },\n    toggleFullscreen: (state) => { state.fullscreen = !state.fullscreen }\n  }\n});\n\nconst { reducer, actions } = toolsSlice;\nexport const { setToolType, toggleFullscreen } = actions;\nexport default reducer;","import React from 'react';\nimport { toolTypes, nodeTypeColor } from '../nodes/NodeTypes';\nimport { setToolType } from './toolsSlice';\nimport Button from '../../shared/Button';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\n\nconst ToolBar = () => {\n    const dispatch = useDispatch();\n    const selected = useSelector(({ tools }) => tools.toolType);\n    return (\n        <div>\n            {toolTypes.map(type => <Button\n                key={type}\n                onClick={dispatch.bind(null, setToolType({ type }))}\n                style={{\n                    backgroundColor: nodeTypeColor[type],\n                    transform: type === selected ? 'scale(1.2, 1.2)' : null,\n                    margin: '.4em'\n                }} />)}\n        </div>\n    );\n}\n\nexport default ToolBar;","import React from 'react';\nimport Button from \"../../shared/Button\"\nimport { useDispatch } from 'react-redux';\nimport { clearNodes } from \"./nodesSlice\";\n\nconst ClearButton = () => {\n  const dispatch = useDispatch();\n  const clear = () => dispatch(clearNodes());\n  return <Button primary={true} onClick={clear}>Clear</Button>\n};\n\nexport default ClearButton;","import React from 'react';\nimport Button from '../../shared/Button';\nimport { toggleFullscreen } from '../tools/toolsSlice';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\n\nconst FullscreenButton = () => {\n    const dispatch = useDispatch();\n    const fullscreen = useSelector(({ tools }) => tools.fullscreen);\n    return (\n        <Button onClick={dispatch.bind(null, toggleFullscreen())}\n            style={{\n                position: 'fixed',\n                left: '.2em',\n                bottom: '.2em'\n            }}>{fullscreen ? '❌' : '🔼'}</Button>\n    );\n};\n\nexport default FullscreenButton;","import React from 'react';\nimport Nodes from '../features/nodes/Nodes.jsx';\nimport ResetButton from '../features/nodes/ResetButton';\nimport Container from '../shared/Container';\nimport TitleHeader from '../shared/TitleHeader';\nimport ToolBar from '../features/tools/ToolBar.jsx';\nimport ClearButton from '../features/nodes/ClearButton.jsx';\nimport FullscreenButton from '../features/tools/FullscreenButton.jsx';\n\nfunction App() {\n  return (\n    <Container>\n      <TitleHeader>Pathfinding tool</TitleHeader>\n      <ToolBar />\n      <Nodes animationFrameDuration={5} />\n      <ResetButton />\n      <ClearButton />\n      <FullscreenButton />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport nodesReducer from '../features/nodes/nodesSlice';\nimport mouseReducer from '../features/mouse/mouseSlice';\nimport toolsReducer from '../features/tools/toolsSlice';\n\nconst reducer = {\n  nodes: nodesReducer,\n  mouse: mouseReducer,\n  tools: toolsReducer\n};\n\nexport default configureStore({\n  reducer,\n  middleware: [] \n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './app/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}