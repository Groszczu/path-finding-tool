{"version":3,"sources":["shared/GridContainer.js","features/nodes/NodeTypes.js","features/nodes/Node.jsx","features/nodes/nodeHelpers.js","features/nodes/nodes.js","util/alghorithms/dijkstra.js","shared/Button.js","features/nodes/Nodes.jsx","features/nodes/ResetButton.js","shared/Container.js","shared/TitleHeader.js","app/App.js","serviceWorker.js","app/store.js","index.js"],"names":["GridContainer","styled","div","props","columns","css","NodeTypes","empty","wall","visited","result","Square","span","attrs","style","transitionDelay","delay","resultNode","startNode","endNode","Node","node","animationFrameDuration","onMouseDown","onMouseOver","gridColumnStart","x","gridRowStart","y","gridColumnEnd","gridRowEnd","visitedIndex","type","createEmptyNodes","cols","rows","Array","fill","map","_","row","col","areEqual","node1","node2","defaultState","nodes","middleNodeY","Math","floor","length","middleNodeX","initNodesState","nodesSlice","createSlice","name","initialState","reducers","setNodeType","state","payload","setNodesType","setVisited","stateNode","setStartNode","setEndNode","resetNodes","actions","reducer","dijkstra","distanceFromStart","flat","filter","distance","Infinity","previousNode","unvisited","i","sort","a","b","currentNode","moves","shift","abs","min","push","find","n","Button","button","primary","Nodes","useState","mousePressed","setMousePressed","useSelector","gridColumns","dispatch","useDispatch","setNodeToWall","useCallback","setNodeToWallIfPressed","startPathfinding","Dijkstra","setTimeout","onMouseUp","key","bind","onClick","ResetButton","reset","Container","TitleHeader","h1","App","Boolean","window","location","hostname","match","nodesReducer","configureStore","middleware","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73e3baa1.chunk.js","sourcesContent":["import styled, { css } from 'styled-components';\n\nconst GridContainer = styled.div`\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(22px, 1fr));\n    grid-gap: 1px;\n    margin: 0 auto;\n    overflow: auto;\n    background: #ffeadb;\n    padding: 10px;\n    border-radius: 10px;\n\n    ${\n        props => props.columns && \n            css`grid-template-columns: repeat(${props.columns}, minmax(22px, 1fr));`\n    }\n`;\n\nexport default GridContainer;","const NodeTypes = {\n  empty: 'empty_node',\n  wall: 'wall_node',\n  visited: 'visited_node',\n  result: 'result_node'\n};\n\nexport default NodeTypes;","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport NodeTypes from './NodeTypes';\n\nconst Square = styled.span.attrs(props => ({\n    style: { \n        transitionDelay: `${props.delay}ms`,\n    }\n}))`\n    width: 20px;\n    height: 20px;\n    border: 1px solid var(--secondary-clr);\n    opacity: 0.8;\n    border-radius: 100%;\n    transition: background-color 1s;\n\n    ${\n    props => props.wall && css`background: var(--background-clr);`\n    }\n\n    ${\n    props => props.visited && css`background: var(--visited-node-clr);`\n    }\n\n    ${\n    props => props.resultNode && css`background: var(--result-node-clr);`\n    }\n\n    ${\n    props => props.startNode && css`background: var(--start-node-clr);\n    box-shadow: 0px 0px 10px 5px rgba(9,135,0,1);`\n    }\n\n    ${\n    props => props.endNode && css`background: var(--end-node-clr);\n    box-shadow: 0px 0px 10px 5px rgba(252,3,3,1);`\n    }\n`;\n\nconst Node = ({ node, animationFrameDuration, startNode, endNode, onMouseDown, onMouseOver }) => {\n\n    const style = {\n        gridColumnStart: node.x + 1,\n        gridRowStart: node.y + 1,\n        gridColumnEnd: 'span 1',\n        gridRowEnd: 'span 1',\n    };\n\n    return (\n        <Square\n            delay={node.visitedIndex * animationFrameDuration}\n            wall={node.type === NodeTypes.wall}\n            visited={node.type === NodeTypes.visited}\n            resultNode={node.type === NodeTypes.result}\n            startNode={startNode}\n            endNode={endNode}\n            style={style}\n            onMouseDown={onMouseDown}\n            onMouseOver={onMouseOver} />\n    );\n};\n\nexport default Node;","import NodeTypes from './NodeTypes';\n\nexport function createEmptyNodes(cols, rows) {\n  return Array(rows).fill(0).map((_, row) =>\n    Array(cols).fill(0).map((_, col) => createEmptyNode(col, row)));\n}\n\nexport function createEmptyNode(x, y) {\n  return { x, y, type: NodeTypes.empty, visitedIndex: null };\n}\n\nexport function areEqual(node1, node2) {\n  if (!node1 || !node2) {\n    return false;\n  }\n  return node1.x === node2.x && node1.y === node2.y;\n}\n\nexport function neightbours(node1, node2) {\n  const xDistance = Math.abs(node1.x - node2.x);\n  const yDistance = Math.abs(node1.y - node2.y);\n  return xDistance + yDistance === 1;\n}","import { createSlice } from '@reduxjs/toolkit';\nimport NodeTypes from \"./NodeTypes\";\nimport { createEmptyNodes, areEqual } from './nodeHelpers';\n\n\n// Default state\nconst COLS = 40;\nconst ROWS = 30;\n\nfunction initNodesState(cols, rows) {\n    const nodes = createEmptyNodes(cols, rows);\n    const middleNodeY = Math.floor(nodes.length / 2);\n    const middleNodeX = Math.floor(nodes[0].length / 2);\n\n    return {\n        columns: cols,\n        rows,\n        nodes,\n        startNode: { x: middleNodeX, y: middleNodeY },\n        endNode: { x: middleNodeX, y: 10 }\n    };\n}\n\nconst defaultState = initNodesState(COLS, ROWS);\n\nconst nodesSlice = createSlice({\n    name: 'nodes',\n    initialState: defaultState,\n    reducers: {\n        setNodeType: (state, { payload }) => {\n            const { x, y, type } = payload;\n            const { startNode, endNode } = state;\n            if (!areEqual({ x, y }, startNode) && !areEqual({ x, y }, endNode)) {\n                state.nodes[y][x].type = type;\n            }\n        },\n        setNodesType: (state, { payload }) => {\n            const { nodes, type } = payload;\n            const { startNode, endNode } = state;\n            for (const node of nodes) {\n                if (!areEqual(node, startNode) && !areEqual(node, endNode)) {\n                    state.nodes[node.y][node.x].type = type;\n                }\n            }\n        },\n        setVisited: (state, { payload }) => {\n            const { nodes } = payload;\n            const { startNode, endNode } = state;\n            for (const node of nodes) {\n                if (!areEqual(node, startNode) && !areEqual(node, endNode)) {\n                    const stateNode = state.nodes[node.y][node.x];\n                    stateNode.visitedIndex = node.visitedIndex;\n                    stateNode.type = NodeTypes.visited;\n                }\n            }\n        },\n        setStartNode: (state, { payload }) => {\n            const { x, y } = payload;\n            if (state.nodes[y][x].type === NodeTypes.empty) {\n                state.startNode = { x, y };\n            }\n        },\n        setEndNode: (state, { payload }) => {\n            const { x, y } = payload;\n            if (state.nodes[y][x].type === NodeTypes.empty) {\n                state.endNode = { x, y };\n            }\n        },\n        resetNodes: () => defaultState\n    }\n});\n\nconst { actions, reducer } = nodesSlice;\nexport const { setNodeType, setNodesType, setStartNode, setEndNode, resetNodes, setVisited } = actions;\nexport default reducer;","import { areEqual, neightbours } from \"../../features/nodes/nodeHelpers\";\nimport NodeTypes from \"../../features/nodes/NodeTypes\";\n\nexport default function dijkstra(startNode, endNode, nodes) {\n\n  const visited = [];\n  const distanceFromStart = nodes\n    .flat()\n    .filter(node => node.type !== NodeTypes.wall)\n    .map(node => ({\n    ...node,\n    distance: areEqual(node, startNode) ? 0 : Infinity,\n    previousNode: null\n  }));\n  let unvisited = [...distanceFromStart];\n\n  let i = 0;\n  for (; unvisited.length !== 0; i++) {\n    unvisited.sort((a, b) => a.distance - b.distance);\n    const currentNode = unvisited[0];\n    \n    if (currentNode.distance === Infinity) {\n      return { visited, result: null, moves: i };\n    }\n\n    unvisited.shift(); //remove current node\n    unvisited = unvisited.map(node => {\n      return neightbours(currentNode, node) ?\n        {\n          ...node,\n          distance: Math.min(node.distance, currentNode.distance + 1), \n          previousNode: node.distance > currentNode.distance + 1 ? currentNode : node.previousNode\n        }\n        :\n        node;\n    });\n    visited.push({ ...currentNode, visitedIndex: i });\n    if (areEqual(currentNode, endNode)) {\n      break;\n    }\n  }\n\n  const result = [];\n  const endNodeData = visited.find(n => areEqual(n, endNode));\n  for (let node = endNodeData.previousNode; !areEqual(node, startNode); node = node.previousNode ) {\n    result.push(node);\n  }\n\n  return { visited, result, moves: i };\n}","import styled from 'styled-components';\n\nconst Button = styled.button`\n  border-radius: 10px;\n  background-color: ${props => props.primary ? 'var(--primary-clr)' : 'var(--secondary-clr)'};\n  font-size: 1.5rem;\n  padding: .5em 1.5em;\n  margin: 2% auto 0 auto;\n  border: 2px solid ${props => props.primary ? 'var(--secondary-clr)' : 'var(--primary-clr)'};\n  cursor: pointer;\n\n  :hover {\n    opacity: 0.8;\n  }\n`;\n\nexport default Button;","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport GridContainer from '../../shared/GridContainer';\nimport Node from './Node';\nimport { setNodeType, setNodesType, setVisited } from './nodes';\nimport { useCallback } from 'react';\nimport NodeTypes from './NodeTypes';\nimport { areEqual } from './nodeHelpers';\nimport Dijkstra from '../../util/alghorithms/dijkstra';\nimport Button from '../../shared/Button';\n\nconst Nodes = ({ animationFrameDuration }) => {\n    const [mousePressed, setMousePressed] = useState(false);\n\n    const nodes = useSelector(({ nodes }) => nodes.nodes);\n    const gridColumns = useSelector(({ nodes }) => nodes.columns);\n    const startNode = useSelector(({ nodes }) => nodes.startNode);\n    const endNode = useSelector(({ nodes }) => nodes.endNode);\n    const dispatch = useDispatch();\n    const setNodeToWall = useCallback((node) =>\n        dispatch(setNodeType({ x: node.x, y: node.y, type: NodeTypes.wall })),\n        [dispatch]);\n\n    const setNodeToWallIfPressed = useCallback((node) => {\n        if (!mousePressed) return false;\n        setNodeToWall(node);\n        return true;\n    }, [mousePressed, setNodeToWall]);\n\n    const startPathfinding = useCallback(() => {\n        const { visited, result, moves } = Dijkstra(startNode, endNode, nodes);\n        visited && dispatch(setVisited({ nodes: visited }));\n        result &&\n            setTimeout(() =>\n                dispatch(setNodesType({\n                    nodes: result,\n                    type: NodeTypes.result\n                })\n                )\n                , animationFrameDuration * moves);\n    }, [dispatch, animationFrameDuration, startNode, endNode, nodes]);\n\n    return (\n        <>\n            <GridContainer columns={gridColumns} onMouseDown={() => setMousePressed(true)} onMouseUp={() => setMousePressed(false)}>\n                {nodes.flat().map(node =>\n                    <Node\n                        animationFrameDuration={animationFrameDuration}\n                        key={`${node.x}_${node.y}`}\n                        node={node}\n                        startNode={areEqual(node, startNode)}\n                        endNode={areEqual(node, endNode)}\n                        onMouseDown={setNodeToWall.bind(null, node)}\n                        onMouseOver={setNodeToWallIfPressed.bind(null, node)} />)}\n            </GridContainer>\n            <Button onClick={startPathfinding}>Start</Button>\n        </>\n    );\n};\n\nexport default Nodes;","import React, { useCallback } from 'react';\nimport Button from \"../../shared/Button\"\nimport { useDispatch } from 'react-redux';\nimport { resetNodes } from \"./nodes\";\n\nconst ResetButton = () => {\n  const dispatch = useDispatch();\n  const reset = useCallback(() => dispatch(resetNodes()), [dispatch]);\n  return <Button primary={true} onClick={reset}>Reset</Button>\n};\n\nexport default ResetButton;","import styled from 'styled-components';\n\nconst Container = styled.div`\n  margin: 0 auto;\n  width: 90%;\n  max-width: 1000px;\n  text-align: center;\n  padding: 0 2em;\n  border-radius: 10px;\n`;\n\nexport default Container;","import styled from 'styled-components';\n\nconst TitleHeader = styled.h1`\n  font-size: 3rem;\n  color: var(--text-clr);\n`;\n\nexport default TitleHeader;","import React from 'react';\nimport './App.css';\nimport Nodes from '../features/nodes/Nodes.jsx';\nimport ResetButton from '../features/nodes/ResetButton';\nimport Container from '../shared/Container';\nimport TitleHeader from '../shared/TitleHeader';\n\nfunction App() {\n  return (\n    <Container>\n      <TitleHeader>Pathfinding tool</TitleHeader>\n      <Nodes animationFrameDuration={10} />\n      <ResetButton />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport nodesReducer from '../features/nodes/nodes';\n\nconst reducer = {\n  nodes: nodesReducer\n};\n\nexport default configureStore({\n  reducer,\n  middleware: [] \n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './app/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}