{"version":3,"sources":["shared/GridContainer.js","shared/Keyframes.js","features/nodes/NodeTypes.js","features/nodes/Node.jsx","features/nodes/nodeHelpers.js","features/nodes/nodesSlice.js","features/mouse/mouseSlice.js","util/algorithms/dijkstra.js","shared/Button.js","features/nodes/useNodesSlice.js","features/nodes/Nodes.jsx","shared/Container.js","shared/TitleHeader.js","features/tools/toolsSlice.js","features/tools/ToolBar.jsx","features/tools/FullscreenButton.jsx","app/App.js","serviceWorker.js","app/store.js","index.js"],"names":["GridContainer","styled","div","props","columns","css","rows","fullscreen","Math","min","scaleKeyframe","keyframes","visitedNodeKeyframe","NodeTypes","empty","wall","visited","result","start","end","changeableTypes","toolTypes","isToolType","type","includes","nodeTypeColor","nodeTypeStyle","Square","span","attrs","delay","style","gridColumnStart","x","gridRowStart","y","gridColumnEnd","gridRowEnd","transitionDelay","animationDelay","Node","node","animationFrameDuration","onMouseDown","onMouseOver","visitedIndex","createNode","areEqual","node1","node2","validateNodeTypeChange","startNode","endNode","newType","validateNodeChange","defaultState","cols","nodes","Array","fill","map","_","row","col","createEmptyNodes","middleNodeY","floor","length","middleNodeX","canStartPathfinding","initNodesState","nodesSlice","createSlice","name","initialState","reducers","setNodeType","state","payload","setNodesType","entries","i","withIndex","setVisited","stateNode","setStartNode","oldStartNode","newStartNode","setEndNode","oldEndNode","newEndNode","clearNodes","forEach","resetNodes","actions","reducer","mouseSlice","require","mousePressed","mousePress","mouseRelease","dijkstra","unvisited","flat","filter","distance","Infinity","previousNode","sort","a","b","currentNode","moves","shift","abs","push","find","n","Button","button","primary","selected","useSelector","useNodesSlice","Nodes","mouse","selectedTool","tools","toolType","dispatch","useDispatch","changeNodeTypeIfPressed","changeNodeType","action","getNodeChangeAction","resultTimeout","useRef","bind","onMouseUp","key","onClick","current","setTimeout","clearTimeout","Container","TitleHeader","h1","toolsSlice","setToolType","toggleFullscreen","ToolBar","backgroundColor","margin","FullscreenButton","position","left","bottom","zIndex","App","Boolean","window","location","hostname","match","nodesReducer","mouseReducer","toolsReducer","configureStore","middleware","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"04CAEA,IA0CeA,EA1COC,IAAOC,IAAV,KAiBX,SAAAC,GAAK,OAAIA,EAAMC,SACXC,YADK,IAC+BF,EAAMC,YAI9C,SAAAD,GAAK,OAAIA,EAAMG,MACXD,YADK,IAC4BF,EAAMG,SAI3C,SAAAH,GAAK,OAAIA,EAAMI,YACXF,YADK,IAE+BF,EAAMC,QAA2BI,KAAKC,IAAIN,EAAMC,QAASD,EAAMG,MAClEH,EAAMG,KAAwBE,KAAKC,IAAIN,EAAMC,QAASD,EAAMG,U,+hBC9BlG,I,IAAMI,EAAgBC,YAAH,KAWbC,EAAsBD,YAAH,K,otBCVhC,IAAME,EAAY,CAChBC,MAAO,aACPC,KAAM,YACNC,QAAS,eACTC,OAAQ,cACRC,MAAO,aACPC,IAAK,YAGMC,EAAkB,CAC7BP,EAAUC,MACVD,EAAUE,KACVF,EAAUG,QACVH,EAAUI,QAGCI,EAAY,CACvBR,EAAUC,MACVD,EAAUE,KACVF,EAAUK,MACVL,EAAUM,KAOL,SAASG,EAAWC,GACzB,OAAOF,EAAUG,SAASD,GAGrB,IAAME,GAAa,mBACvBZ,EAAUC,MAAQ,yBADK,cAEvBD,EAAUE,KAAO,wBAFM,cAGvBF,EAAUG,QAAU,2BAHG,cAIvBH,EAAUI,OAAS,0BAJI,cAKvBJ,EAAUK,MAAQ,yBALK,cAMvBL,EAAUM,IAAM,uBANO,GASbO,GAAa,mBACvBb,EAAUC,MAAQ,IADK,cAEvBD,EAAUE,KAAOV,YAFM,IAGRoB,EAAcZ,EAAUE,MACzBL,IAJS,cAKvBG,EAAUG,QAAUX,YALG,IAMRoB,EAAcZ,EAAUG,SACzBJ,IAPS,cAQvBC,EAAUI,OAASZ,YARI,IASRoB,EAAcZ,EAAUI,QACzBP,IAVS,cAYvBG,EAAUK,MAAQb,YAZK,IAaRoB,EAAcZ,EAAUK,SAbhB,cAgBvBL,EAAUM,IAAMd,YAhBO,IAiBRoB,EAAcZ,EAAUM,OAjBhB,GAuBXN,I,oKC9Df,IAAMc,EAAS1B,IAAO2B,KAAKC,OAAM,gBAAGC,EAAH,EAAGA,MAAH,MAAsB,CACnDC,MAAO,CACHC,gBAFyB,EAAUC,EAEd,EACrBC,aAHyB,EAAaC,EAGpB,EAClBC,cAAe,SACfC,WAAY,SACZC,gBAAgB,GAAD,OAAKR,EAAL,MACfS,eAAe,GAAD,OAAKT,EAAL,UAPP7B,CAAH,KAcN,SAAAE,GAAK,OAAIuB,EAAcvB,EAAMoB,SAiBpBiB,EAdF,SAAC,GAAgE,IAA9DC,EAA6D,EAA7DA,KAAMC,EAAuD,EAAvDA,uBAAwBC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,YAEvD,OACI,kBAACjB,EAAD,CACIG,MAAOW,EAAKI,aAAeH,EAC3BnB,KAAMkB,EAAKlB,KACXU,EAAGQ,EAAKR,EACRE,EAAGM,EAAKN,EACRQ,YAAaA,EACbC,YAAaA,K,uBCtBlB,SAASE,EAAWb,EAAGE,GAA4B,IAAzBZ,EAAwB,uDAAjBV,EAAUC,MAChD,MAAO,CAAEmB,IAAGE,IAAGZ,OAAMsB,aAAc,MAG9B,SAASE,EAASC,EAAOC,GAC9B,SAAKD,IAAUC,KAGRD,EAAMf,IAAMgB,EAAMhB,GAAKe,EAAMb,IAAMc,EAAMd,GAS3C,SAASe,EAAuBT,EAAMU,EAAWC,EAASC,GAC7D,OAAOC,EAAmBb,EAAMU,EAAWC,KFAd7B,EEA2C8B,EFCnEjC,EAAgBI,SAASD,IAD3B,IAA0BA,EEG1B,SAAS+B,EAAmBb,EAAMU,EAAWC,GAChD,OAAQL,EAASN,EAAMU,KACfJ,EAASN,EAAMW,GCF3B,IAAMG,EApBN,SAAwBC,EAAMlD,GAC1B,IAAMmD,EDPH,SAA0BD,EAAMlD,GACrC,OAAOoD,MAAMpD,GAAMqD,KAAK,GAAGC,KAAI,SAACC,EAAGC,GAAJ,OAC7BJ,MAAMF,GAAMG,KAAK,GAAGC,KAAI,SAACC,EAAGE,GAAJ,OAAYjB,EAAWiB,EAAKD,SCKtCE,CAAiBR,EAAMlD,GAC/B2D,EAAczD,KAAK0D,MAAMT,EAAMU,OAAS,GACxCC,EAAc5D,KAAK0D,MAAMT,EAAM,GAAGU,OAAS,GAE3ChB,EAAYM,EAAMQ,GAAaG,GAC/BhB,EAAUK,EAAMjD,KAAK0D,MAAMD,EAAc,IAAIG,GAInD,OAHAjB,EAAU5B,KAAOV,EAAUK,MAC3BkC,EAAQ7B,KAAOV,EAAUM,IAElB,CACHf,QAASoD,EACTlD,OACAmD,QACAY,qBAAqB,EACrBlB,YACAC,WAIakB,CAvBR,GACA,IAwBPC,EAAaC,sBAAY,CAC3BC,KAAM,QACNC,aAAcnB,EACdoB,SAAU,CACNC,YAAa,SAACC,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACX7C,EAAe6C,EAAf7C,EAAGE,EAAY2C,EAAZ3C,EAAGZ,EAASuD,EAATvD,KAEV2B,EAAuB4B,EADID,EAAvB1B,UAAuB0B,EAAZzB,QACqC7B,KACpDsD,EAAMpB,MAAMtB,GAAGF,GAAKa,EAAWb,EAAGE,EAAGZ,KAG7CwD,aAAc,SAACF,EAAD,GAAyB,IAAD,EAAdC,EAAc,EAAdA,QACZrB,EAAgBqB,EAAhBrB,MAAOlC,EAASuD,EAATvD,KACP4B,EAAuB0B,EAAvB1B,UAAWC,EAAYyB,EAAZzB,QAFe,cAGVK,EAAMuB,WAHI,IAGlC,2BAAyC,CAAC,IAAD,yBAA7BC,EAA6B,KAA1BxC,EAA0B,KACrC,GAAIS,EAAuBT,EAAMU,EAAWC,EAAS7B,GAAO,CAAC,IACjDU,EAASQ,EAATR,EAAGE,EAAMM,EAANN,EACX0C,EAAMpB,MAAMtB,GAAGF,GAAKa,EAAWb,EAAGE,EAAGZ,GACjCuD,EAAQI,YAAWL,EAAMpB,MAAMtB,GAAGF,GAAGY,aAAeoC,KAP9B,gCAWtCE,WAAY,SAACN,EAAD,GAAyB,IAAD,EACxBpB,EADwB,EAAdqB,QACVrB,MACAN,EAAuB0B,EAAvB1B,UAAWC,EAAYyB,EAAZzB,QAFa,cAGbK,GAHa,IAGhC,2BAA0B,CAAC,IAAhBhB,EAAe,QACtB,GAAIa,EAAmBb,EAAMU,EAAWC,GAAU,CAC9C,IAAMgC,EAAYP,EAAMpB,MAAMhB,EAAKN,GAAGM,EAAKR,GAC3CmD,EAAUvC,aAAeJ,EAAKI,aAC9BuC,EAAU7D,KAAOV,EAAUG,UAPH,8BAUhC6D,EAAMR,qBAAsB,GAEhCgB,aAAc,SAACR,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACZ7C,EAAS6C,EAAT7C,EAAGE,EAAM2C,EAAN3C,EACQmD,EAA0BT,EAArC1B,UACR,GAAIG,EAAmBwB,EAASQ,EADaT,EAAZzB,SACuB,CACpDyB,EAAMpB,MAAM6B,EAAanD,GAAGmD,EAAarD,GAAKa,EAAWwC,EAAarD,EAAGqD,EAAanD,GAEtF,IAAMoD,EAAezC,EAAWb,EAAGE,EAAGtB,EAAUK,OAChD2D,EAAM1B,UAAYoC,EAClBV,EAAMpB,MAAMtB,GAAGF,GAAKsD,IAG5BC,WAAY,SAACX,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACV7C,EAAS6C,EAAT7C,EAAGE,EAAM2C,EAAN3C,EACHgB,EAAmC0B,EAAnC1B,UAAoBsC,EAAeZ,EAAxBzB,QACnB,GAAIE,EAAmBwB,EAAS3B,EAAWsC,GAAa,CACpDZ,EAAMpB,MAAMgC,EAAWtD,GAAGsD,EAAWxD,GAAKa,EAAW2C,EAAWxD,EAAGwD,EAAWtD,GAE9E,IAAMuD,EAAa5C,EAAWb,EAAGE,EAAGtB,EAAUM,KAC9C0D,EAAMzB,QAAUsC,EAChBb,EAAMpB,MAAMtB,GAAGF,GAAKyD,IAG5BC,WAAY,SAACd,GACTA,EAAMpB,MAAMmC,SAAQ,SAAA9B,GAAG,OAAIA,EAAI8B,SAAQ,SAAAnD,GAC9BnB,EAAWmB,EAAKlB,QACjBkB,EAAKlB,KAAOV,EAAUC,OAC1B2B,EAAKI,aAAe,WAExBgC,EAAMR,qBAAsB,GAEhCwB,WAAY,kBAAMtC,MAIlBuC,EAAqBvB,EAArBuB,QAASC,EAAYxB,EAAZwB,QACFnB,EAA4FkB,EAA5FlB,YAAaG,EAA+Ee,EAA/Ef,aAAcM,EAAiES,EAAjET,aAAcG,EAAmDM,EAAnDN,WAAYG,EAAuCG,EAAvCH,WAAYE,EAA2BC,EAA3BD,WAAYV,GAAeW,EAAfX,WAC7EY,KC/FTC,IAAaxB,EANKyB,EAAQ,GAAxBzB,aAMuB,CAC7BC,KAAM,QACNC,aANmB,CACnBwB,cAAc,GAMdvB,SAAU,CACRwB,WAAY,SAACtB,GAAYA,EAAMqB,cAAe,GAC9CE,aAAc,SAACvB,GAAYA,EAAMqB,cAAe,MAI5CH,GAAqBC,GAArBD,QAASD,GAAYE,GAAZF,QACFK,GAA6BL,GAA7BK,WAAYC,GAAiBN,GAAjBM,aACZL,M,QCdA,SAASM,GAAS5C,GAE/B,IAAMzC,EAAU,GACZsF,EAAY7C,EACb8C,OACAC,QAAO,SAAA/D,GAAI,OAAIA,EAAKlB,OAASV,EAAUE,QACvC6C,KAAI,SAAAnB,GAAI,oCACNA,GADM,IAETgE,SAAUhE,EAAKlB,OAASV,EAAUK,MAAQ,EAAIwF,IAC9CC,aAAc,UAGZ1B,EAAI,EAZ8B,aAcpCqB,EAAUM,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEJ,SAAWK,EAAEL,YACxC,IAAMM,EAAcT,EAAU,GAI9B,OAAIS,EAAYN,WAAaC,IACrB,CAAN,EAAO,CAAE1F,UAASC,OAAQ,KAAM+F,MAAO/B,KAGzCqB,EAAUW,QACVX,EAAYA,EAAU1C,KAAI,SAAAnB,GACxB,OHToBO,EGSH+D,EHTU9D,EGSGR,EHRhBjC,KAAK0G,IAAIlE,EAAMf,EAAIgB,EAAMhB,GACzBzB,KAAK0G,IAAIlE,EAAMb,EAAIc,EAAMd,KACV,EGMtB,6BAEAM,GAFA,IAGHgE,SAAUjG,KAAKC,IAAIgC,EAAKgE,SAAUM,EAAYN,SAAW,GACzDE,aAAclE,EAAKgE,SAAWM,EAAYN,SAAW,EAAIM,EAActE,EAAKkE,eAG9ElE,EHhBD,IAAmBO,EAAOC,KGmB7BjC,EAAQmG,KAAR,6BAAkBJ,GAAlB,IAA+BlE,aAAcoC,KACzC8B,EAAYxF,OAASV,EAAUM,IACjC,aADF,IApCoC,EAatC,KAA4B,IAArBmF,EAAUnC,OAAcc,IAAK,CAAC,IAAD,4BAwBhC,QAxBgC,2CA8BpC,IAFA,IAAMhE,EAAS,GAENwB,EADWzB,EAAQoG,MAAK,SAAAC,GAAC,OAAIA,EAAE9F,OAASV,EAAUM,OAC/BwF,aAAclE,EAAKlB,OAASV,EAAUK,MAAOuB,EAAOA,EAAKkE,aACnF1F,EAAOkG,KAAK1E,GAGd,MAAO,CAAEzB,UAASC,SAAQ+F,MAAO/B,G,4hBChDnC,IA0BeqC,GA1BArH,IAAOsH,OAAV,MAEU,SAAApH,GAAK,OAAIA,EAAMqH,QAAU,qBAAuB,0BAWlE,SAAArH,GAAK,OAAIA,EAAMsH,UAAYpH,YAAlB,SCfLqH,GAAgBzB,EAAQ,GAAxByB,YAQOC,GANO,WAGpB,OAFkBD,IAAY,qBAAGjE,UC0EpBmE,GAhED,SAAC,GAAgC,IAA9BlF,EAA6B,EAA7BA,uBAEPwD,EAAewB,uBAAY,qBAAGG,MAAkB3B,gBAFZ,EAQtCyB,KAJAlE,EAJsC,EAItCA,MACArD,EALsC,EAKtCA,QACAE,EANsC,EAMtCA,KACA+D,EAPsC,EAOtCA,oBAEEyD,EAAeJ,uBAAY,qBAAGK,MAAkBC,YAChDzH,EAAamH,uBAAY,qBAAGK,MAAkBxH,cAE9C0H,EAAWC,wBAEXC,EAA0B,SAAC1F,EAAMlB,GACnC,QAAK2E,IACLkC,EAAe3F,EAAMlB,IACd,IAEL6G,EAAiB,SAAC3F,EAAMlB,GAAP,OACnB0G,ENCD,SAA6BhG,EAAGE,EAAGZ,GACxC,IAAI8G,EACJ,OAAQ9G,GACN,KAAKV,EAAUC,MACf,KAAKD,EAAUE,KACf,KAAKF,EAAUG,QACf,KAAKH,EAAUI,OACboH,EAASzD,EAAY,CAAE3C,IAAGE,IAAGZ,SAC7B,MACF,KAAKV,EAAUK,MACbmH,EAAShD,EAAa,CAAEpD,IAAGE,MAC3B,MACF,KAAKtB,EAAUM,IACbkH,EAAS7C,EAAW,CAAEvD,IAAGE,MAI7B,OAAOkG,EMlBQC,CAAoB7F,EAAKR,EAAGQ,EAAKN,EAAGZ,KAE7CgH,EAAgBC,iBAAO,MAmB3B,OACI,oCACI,kBAAC,EAAD,CAAejI,WAAYA,EAAYH,QAASA,EAASE,KAAMA,EAAMqC,YAAasF,EAASQ,KAAK,KAAMtC,MAAeuC,UAAWT,EAASQ,KAAK,KAAMrC,OAE5I3C,EAAM8C,OAAO3C,KAAI,SAAAnB,GAAI,OACjB,kBAAC,EAAD,CACIkG,IAAG,UAAKlG,EAAKR,EAAV,YAAeQ,EAAKN,GACvBO,uBAAwBA,EACxBD,KAAMA,EACNE,YAAayF,EAAeK,KAAK,KAAMhG,EAAMqF,GAC7ClF,YAAauF,EAAwBM,KAAK,KAAMhG,EAAMqF,SAIlEzD,EACM,kBAAC,GAAD,CAAQuE,QAjCD,WAAO,IAAD,EACQvC,GAAS5C,GAApCzC,EADmB,EACnBA,QAASC,EADU,EACVA,OAAQ+F,EADE,EACFA,MACzBhG,GAAWiH,EAAS9C,GAAW,CAAE1B,MAAOzC,KACpCC,IACAsH,EAAcM,QAAUC,YAAW,kBAC/Bb,EAASlD,EAAa,CAClBtB,MAAOxC,EACPM,KAAMV,EAAUI,OAChBiE,WAAW,OAGbxC,EAAyBsE,MAsBrB,SACA,kBAAC,GAAD,CAAQ4B,QAnBF,WAAQG,aAAaR,EAAcM,SAAUZ,EAAStC,MAmB1B6B,SAAS,GAA3C,SAEV,kBAAC,GAAD,CAAQoB,QApBO,WAAQG,aAAaR,EAAcM,SAAUZ,EAASpC,MAoBpC2B,SAAS,GAA1C,W,gLCtEZ,IAQewB,GARG/I,IAAOC,IAAV,M,2JCAf,IAMe+I,GANKhJ,IAAOiJ,GAAV,MCCXxE,GAAe,CACnBsD,SAAUnH,EAAUE,KACpBR,YAAY,GAGR4I,GAAa3E,sBAAY,CAC7BC,KAAM,QACNC,gBACAC,SAAU,CACRyE,YAAa,SAACvE,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACjBxD,EAAWwD,KACbD,EAAMmD,SAAWlD,IAGrBuE,iBAAkB,SAACxE,GAAYA,EAAMtE,YAAcsE,EAAMtE,eAIrDwF,GAAqBoD,GAArBpD,QAASD,GAAYqD,GAAZrD,QACFsD,GAAkCtD,GAAlCsD,YAAaC,GAAqBvD,GAArBuD,iBACbtD,MCIAuD,GApBC,WACZ,IAAMrB,EAAWC,wBACXT,EAAWC,uBAAY,qBAAGK,MAAkBC,YAIlD,OACI,6BACK3G,EAAUuC,KAAI,SAAArC,GAAI,OAAI,kBAAC,GAAD,CACnBoH,IAAKpH,EACLqH,QAAS,kBANkBX,EAASmB,GAMJ7H,KAChCkG,SAAUlG,IAASkG,EACnB1F,MAAO,CACHwH,gBAAiB9H,EAAcF,GAC/BiI,OAAQ,eCEbC,GAjBU,WACrB,IAAMxB,EAAWC,wBACX3H,EAAamH,uBAAY,qBAAGK,MAAkBxH,cAIpD,OACI,kBAAC,GAAD,CAAQqI,QAHkB,kBAAMX,EAASoB,OAIrCtH,MAAO,CACH2H,SAAU,QACVC,KAAM,OACNC,OAAQ,OACRC,OAAQ,MACRtJ,EAAa,SAAM,iBCDpBuJ,OAXf,WACE,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,yBACA,kBAAC,GAAD,MACA,kBAAC,GAAD,CAAOpH,uBAAwB,KAC/B,kBAAC,GAAD,QCDcqH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbN,IAAMpE,GAAU,CACdtC,MAAO2G,GACPvC,MAAOwC,GACPtC,MAAOuC,IAKMC,4BAAe,CAC5BxE,WACAyE,WAJ2B,KCH7BC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,WAAD,CAAUC,MAAOA,IACf,kBAAC,GAAD,QAGJC,SAASC,eAAe,SFqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3b5c3f4b.chunk.js","sourcesContent":["import styled, { css } from 'styled-components';\n\nconst GridContainer = styled.div`\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(22px, 1fr));\n    grid-template-rows: repeat(auto-fill, minmax(22px, 1fr));\n    justify-content: center;\n\n    margin: 0 auto;\n    padding: 10px;\n    overflow: auto;\n    background: var(--empty-node-clr);\n    border-radius: 10px;\n    border: 3px solid black;\n    user-select: none;\n\n    z-index: 1;\n\n    ${\n        props => props.columns && \n            css`grid-template-columns: repeat(${props.columns}, 25px);`\n    }\n\n    ${\n        props => props.rows && \n            css`grid-template-rows: repeat(${props.rows}, 25px);`\n    }\n\n    ${\n        props => props.fullscreen &&\n            css`\n                grid-template-columns: repeat(${props.columns}, calc(100vmin / ${Math.min(props.columns, props.rows)}));\n                grid-template-rows: repeat(${props.rows}, calc(100vmin / ${Math.min(props.columns, props.rows)}));\n                border: none;\n                overflow: hidden;\n                position: absolute;\n                padding: 0;\n                left: 0;\n                top: 0;\n                height: 100vh;\n                width: 100vw;`\n    }\n`;\n\nexport default GridContainer;","import { keyframes } from 'styled-components';\n\nexport const scaleKeyframe = keyframes`\n  0% {\n    transform: scale(1.4, 1.4);\n    z-index: 2;\n  }\n  100%{\n    transform: scale(1, 1);\n    z-index: 0;\n  }\n`;\n\nexport const visitedNodeKeyframe = keyframes`\n  0% {\n    background-color: var(--visit-progress-clr);\n    transform: scale(1.4, 1.4);\n    border-radius: 100%;\n    z-index: 2;\n  }\n  100% {\n    background-color: var(--visited-node-clr);\n    transform: scale(1, 1);\n    border-radius: 0;\n    z-index: 0;\n  }\n`;\n","import { scaleKeyframe, visitedNodeKeyframe } from \"../../shared/Keyframes\";\nimport { css } from \"styled-components\";\n\nconst NodeTypes = {\n  empty: 'empty_node',\n  wall: 'wall_node',\n  visited: 'visited_node',\n  result: 'result_node',\n  start: 'start_node',\n  end: 'end_node'\n};\n\nexport const changeableTypes = [\n  NodeTypes.empty,\n  NodeTypes.wall,\n  NodeTypes.visited,\n  NodeTypes.result\n];\n\nexport const toolTypes = [\n  NodeTypes.empty,\n  NodeTypes.wall,\n  NodeTypes.start,\n  NodeTypes.end\n];\n\nexport function isChangeableType(type) {\n  return changeableTypes.includes(type);\n};\n\nexport function isToolType(type) {\n  return toolTypes.includes(type);\n} \n\nexport const nodeTypeColor = {\n  [NodeTypes.empty]: 'var(--empty-node-clr)',\n  [NodeTypes.wall]: 'var(--wall-node-clr)',\n  [NodeTypes.visited]: 'var(--visited-node-clr)',\n  [NodeTypes.result]: 'var(--result-node-clr)',\n  [NodeTypes.start]: 'var(--start-node-clr)',\n  [NodeTypes.end]: 'var(--end-node-clr)',\n}\n\nexport const nodeTypeStyle = {\n  [NodeTypes.empty]: '',\n  [NodeTypes.wall]: css`\n    background: ${nodeTypeColor[NodeTypes.wall]};\n    animation: ${scaleKeyframe} .2s linear;`,\n  [NodeTypes.visited]: css`\n    background: ${nodeTypeColor[NodeTypes.visited]};\n    animation: ${visitedNodeKeyframe} .3s linear;`,\n  [NodeTypes.result]: css`\n    background: ${nodeTypeColor[NodeTypes.result]};\n    animation: ${scaleKeyframe} .3s linear;\n    transition: background-color .5s;`,\n  [NodeTypes.start]: css`\n    background: ${nodeTypeColor[NodeTypes.start]};\n    box-shadow: 0px 0px 10px 5px rgba(9,135,0,1);\n    z-index: 3`,\n  [NodeTypes.end]: css`\n    background: ${nodeTypeColor[NodeTypes.end]};\n    box-shadow: 0px 0px 10px 5px rgba(252,3,3,1);\n    z-index: 3`,\n};\n\n\nexport default NodeTypes;","import React from 'react';\nimport styled from 'styled-components';\nimport { nodeTypeStyle } from './NodeTypes';\n\nconst Square = styled.span.attrs(({ delay, x, y }) => ({\n    style: {\n        gridColumnStart: x + 1,\n        gridRowStart: y + 1,\n        gridColumnEnd: 'span 1',\n        gridRowEnd: 'span 1',\n        transitionDelay: `${delay}ms`,\n        animationDelay: `${delay}ms`\n    }\n}))`\n    width: 100%;\n    height: auto;\n    border: 1px solid var(--secondary-clr);\n\n    ${props => nodeTypeStyle[props.type]}\n`;\n\nconst Node = ({ node, animationFrameDuration, onMouseDown, onMouseOver }) => {\n\n    return (\n        <Square\n            delay={node.visitedIndex * animationFrameDuration}\n            type={node.type}\n            x={node.x}\n            y={node.y}\n            onMouseDown={onMouseDown}\n            onMouseOver={onMouseOver}\n        />\n    );\n};\n\nexport default Node;","import NodeTypes, { isChangeableType } from './NodeTypes';\nimport { setNodeType, setStartNode, setEndNode } from \"./nodesSlice\";\n\nexport function createEmptyNodes(cols, rows) {\n  return Array(rows).fill(0).map((_, row) =>\n    Array(cols).fill(0).map((_, col) => createNode(col, row)));\n}\n\nexport function createNode(x, y, type = NodeTypes.empty) {\n  return { x, y, type, visitedIndex: null };\n}\n\nexport function areEqual(node1, node2) {\n  if (!node1 || !node2) {\n    return false;\n  }\n  return node1.x === node2.x && node1.y === node2.y;\n}\n\nexport function neighbors(node1, node2) {\n  const xDistance = Math.abs(node1.x - node2.x);\n  const yDistance = Math.abs(node1.y - node2.y);\n  return xDistance + yDistance === 1;\n}\n\nexport function validateNodeTypeChange(node, startNode, endNode, newType) {\n    return validateNodeChange(node, startNode, endNode) && isChangeableType(newType);\n\n}\nexport function validateNodeChange(node, startNode, endNode) {\n    return !areEqual(node, startNode) \n        && !areEqual(node, endNode);\n}\n\nexport function getNodeChangeAction(x, y, type) {\n  let action;\n  switch (type) {\n    case NodeTypes.empty:\n    case NodeTypes.wall:\n    case NodeTypes.visited:\n    case NodeTypes.result:\n      action = setNodeType({ x, y, type });\n      break;\n    case NodeTypes.start:\n      action = setStartNode({ x, y });\n      break;\n    case NodeTypes.end:\n      action = setEndNode({ x, y });\n      break;\n    default: break;\n  }\n  return action;\n};","import { createSlice } from '@reduxjs/toolkit';\nimport NodeTypes, { isToolType } from \"./NodeTypes\";\nimport { createEmptyNodes, validateNodeChange, validateNodeTypeChange, createNode } from './nodeHelpers';\n\n\n// Default state\nconst COLS = 40;\nconst ROWS = 30;\n\nfunction initNodesState(cols, rows) {\n    const nodes = createEmptyNodes(cols, rows);\n    const middleNodeY = Math.floor(nodes.length / 2);\n    const middleNodeX = Math.floor(nodes[0].length / 2);\n\n    const startNode = nodes[middleNodeY][middleNodeX];\n    const endNode = nodes[Math.floor(middleNodeY / 2)][middleNodeX];\n    startNode.type = NodeTypes.start;\n    endNode.type = NodeTypes.end;\n\n    return {\n        columns: cols,\n        rows,\n        nodes,\n        canStartPathfinding: true,\n        startNode,\n        endNode\n    };\n}\n\nconst defaultState = initNodesState(COLS, ROWS);\n\nconst nodesSlice = createSlice({\n    name: 'nodes',\n    initialState: defaultState,\n    reducers: {\n        setNodeType: (state, { payload }) => {\n            const { x, y, type } = payload;\n            const { startNode, endNode } = state;\n            if (validateNodeTypeChange(payload, startNode, endNode, type)) {\n                state.nodes[y][x] = createNode(x, y, type);\n            }\n        },\n        setNodesType: (state, { payload }) => {\n            const { nodes, type } = payload;\n            const { startNode, endNode } = state;\n            for (const [i, node] of nodes.entries()) {\n                if (validateNodeTypeChange(node, startNode, endNode, type)) {\n                    const { x, y } = node;\n                    state.nodes[y][x] = createNode(x, y, type);\n                    if (payload.withIndex) state.nodes[y][x].visitedIndex = i;\n                }\n            }\n        },\n        setVisited: (state, { payload }) => {\n            const { nodes } = payload;\n            const { startNode, endNode } = state;\n            for (const node of nodes) {\n                if (validateNodeChange(node, startNode, endNode)) {\n                    const stateNode = state.nodes[node.y][node.x];\n                    stateNode.visitedIndex = node.visitedIndex;\n                    stateNode.type = NodeTypes.visited;\n                }\n            }\n            state.canStartPathfinding = false;\n        },\n        setStartNode: (state, { payload }) => {\n            const { x, y } = payload;\n            const { startNode: oldStartNode, endNode } = state;\n            if (validateNodeChange(payload, oldStartNode, endNode)) {\n                state.nodes[oldStartNode.y][oldStartNode.x] = createNode(oldStartNode.x, oldStartNode.y);\n\n                const newStartNode = createNode(x, y, NodeTypes.start);\n                state.startNode = newStartNode;\n                state.nodes[y][x] = newStartNode;\n            }\n        },\n        setEndNode: (state, { payload }) => {\n            const { x, y } = payload;\n            const { startNode, endNode: oldEndNode } = state;\n            if (validateNodeChange(payload, startNode, oldEndNode)) {\n                state.nodes[oldEndNode.y][oldEndNode.x] = createNode(oldEndNode.x, oldEndNode.y);\n\n                const newEndNode = createNode(x, y, NodeTypes.end);\n                state.endNode = newEndNode;\n                state.nodes[y][x] = newEndNode;\n            }\n        },\n        clearNodes: (state) => {\n            state.nodes.forEach(row => row.forEach(node => {\n                if (!isToolType(node.type))\n                    node.type = NodeTypes.empty;\n                node.visitedIndex = null;\n            }));\n            state.canStartPathfinding = true;\n        },\n        resetNodes: () => defaultState\n    }\n});\n\nconst { actions, reducer } = nodesSlice;\nexport const { setNodeType, setNodesType, setStartNode, setEndNode, clearNodes, resetNodes, setVisited } = actions;\nexport default reducer;","const { createSlice } = require(\"@reduxjs/toolkit\");\n\nconst initialState = {\n  mousePressed: false\n};\n\nconst mouseSlice = createSlice({\n  name: 'mouse',\n  initialState,\n  reducers: {\n    mousePress: (state) => { state.mousePressed = true },\n    mouseRelease: (state) => { state.mousePressed = false },\n  }\n});\n\nconst { reducer, actions } = mouseSlice;\nexport const { mousePress, mouseRelease } = actions;\nexport default reducer;","import { neighbors } from \"../../features/nodes/nodeHelpers\";\nimport NodeTypes from \"../../features/nodes/NodeTypes\";\n\nexport default function dijkstra(nodes) {\n\n  const visited = [];\n  let unvisited = nodes\n    .flat()\n    .filter(node => node.type !== NodeTypes.wall)\n    .map(node => ({\n    ...node,\n    distance: node.type === NodeTypes.start ? 0 : Infinity,\n    previousNode: null\n  }));\n\n  let i = 0;\n  for (; unvisited.length !== 0; i++) {\n    unvisited.sort((a, b) => a.distance - b.distance);\n    const currentNode = unvisited[0];\n    \n    // if lowest distance from start node in unvisited array equals Infinity\n    // it means there is no path from start to end, so we can end searching\n    if (currentNode.distance === Infinity) {\n      return { visited, result: null, moves: i };\n    }\n\n    unvisited.shift(); //remove current node\n    unvisited = unvisited.map(node => {\n      return neighbors(currentNode, node) ?\n        {\n          ...node,\n          distance: Math.min(node.distance, currentNode.distance + 1), \n          previousNode: node.distance > currentNode.distance + 1 ? currentNode : node.previousNode\n        }\n        :\n        node;\n    });\n\n    visited.push({ ...currentNode, visitedIndex: i });\n    if (currentNode.type === NodeTypes.end) {\n      break;\n    }\n  }\n\n  const result = [];\n  const endNodeData = visited.find(n => n.type === NodeTypes.end);\n  for (let node = endNodeData.previousNode; node.type !== NodeTypes.start; node = node.previousNode ) {\n    result.push(node);\n  }\n\n  return { visited, result, moves: i };\n}","import styled, { css } from 'styled-components';\n\nconst Button = styled.button`\n  border-radius: 10px;\n  background-color: ${props => props.primary ? 'var(--primary-clr)' : 'var(--secondary-clr)'};\n  font-size: 1.5rem;\n  color: var(--light-txt-clr);\n  padding: .5em 1.5em;\n  margin: 2% auto 0 auto;\n  border: 2px solid black;\n  cursor: pointer;\n  opacity: 0.6;\n  transition: all 0.25s;\n\n  ${\n    props => props.selected && css`\n      opacity: 1;\n      transform: scale(1.2, 1.2);\n      border-color: var(--secondary-clr);\n    `\n  }\n\n  :hover {\n    opacity: 1;\n  }\n\n`;\n\nexport default Button;","const { useSelector } = require(\"react-redux\")\n\nconst useNodesSlice = () => {\n  const nodesData = useSelector(({ nodes }) => nodes);\n\n  return nodesData;\n};\n\nexport default useNodesSlice;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport GridContainer from '../../shared/GridContainer';\nimport Node from './Node';\nimport { setNodesType, setVisited, clearNodes, resetNodes } from './nodesSlice';\nimport { mousePress, mouseRelease } from '../mouse/mouseSlice';\nimport NodeTypes from './NodeTypes';\nimport dijkstra from '../../util/algorithms/dijkstra';\nimport Button from '../../shared/Button';\nimport useNodesSlice from './useNodesSlice';\nimport { getNodeChangeAction } from './nodeHelpers';\nimport { useRef } from 'react';\n\nconst Nodes = ({ animationFrameDuration }) => {\n\n    const mousePressed = useSelector(({ mouse }) => mouse.mousePressed);\n    const {\n        nodes,\n        columns,\n        rows,\n        canStartPathfinding\n    } = useNodesSlice();\n    const selectedTool = useSelector(({ tools }) => tools.toolType);\n    const fullscreen = useSelector(({ tools }) => tools.fullscreen);\n\n    const dispatch = useDispatch();\n\n    const changeNodeTypeIfPressed = (node, type) => {\n        if (!mousePressed) return false;\n        changeNodeType(node, type);\n        return true;\n    };\n    const changeNodeType = (node, type) =>\n        dispatch(getNodeChangeAction(node.x, node.y, type));\n\n    let resultTimeout = useRef(null);\n    const startPathfinding = () => {\n        const { visited, result, moves } = dijkstra(nodes);\n        visited && dispatch(setVisited({ nodes: visited }));\n        if (result) {\n            resultTimeout.current = setTimeout(() =>\n                dispatch(setNodesType({\n                    nodes: result,\n                    type: NodeTypes.result,\n                    withIndex: true\n                })\n                )   \n                , animationFrameDuration * moves);\n        }\n    };\n\n    const boundClearNodes = () => { clearTimeout(resultTimeout.current); dispatch(clearNodes()); };\n    const boundResetNode = () => { clearTimeout(resultTimeout.current); dispatch(resetNodes()); };\n\n    return (\n        <>\n            <GridContainer fullscreen={fullscreen} columns={columns} rows={rows} onMouseDown={dispatch.bind(null, mousePress())} onMouseUp={dispatch.bind(null, mouseRelease())}>\n                {\n                    nodes.flat().map(node =>\n                        <Node\n                            key={`${node.x}_${node.y}`}\n                            animationFrameDuration={animationFrameDuration}\n                            node={node}\n                            onMouseDown={changeNodeType.bind(null, node, selectedTool)}\n                            onMouseOver={changeNodeTypeIfPressed.bind(null, node, selectedTool)} />)\n                }\n            </GridContainer>\n            {\n                canStartPathfinding\n                    ? <Button onClick={startPathfinding}>Start</Button>\n                    : <Button onClick={boundClearNodes} primary={true}>Clear</Button>\n            }\n            <Button onClick={boundResetNode} primary={true}>Reset</Button>\n        </>\n    );\n};\n\nexport default Nodes;","import styled from 'styled-components';\n\nconst Container = styled.div`\n  margin: 0 auto;\n  width: 90%;\n  max-width: 1100px;\n  text-align: center;\n  border-radius: 10px;\n`;\n\nexport default Container;","import styled from 'styled-components';\n\nconst TitleHeader = styled.h1`\n  font-size: 3rem;\n  color: var(--text-clr);\n  -webkit-text-stroke: 2px black;\n`;\n\nexport default TitleHeader;","import { createSlice } from '@reduxjs/toolkit';\nimport NodeTypes, { isToolType } from '../nodes/NodeTypes';\n\nconst initialState = {\n  toolType: NodeTypes.wall,\n  fullscreen: false\n};\n\nconst toolsSlice = createSlice({\n  name: 'tools',\n  initialState,\n  reducers: {\n    setToolType: (state, { payload }) => {\n      if (isToolType(payload)) {\n        state.toolType = payload;\n      }\n    },\n    toggleFullscreen: (state) => { state.fullscreen = !state.fullscreen }\n  }\n});\n\nconst { reducer, actions } = toolsSlice;\nexport const { setToolType, toggleFullscreen } = actions;\nexport default reducer;","import React from 'react';\nimport { toolTypes, nodeTypeColor } from '../nodes/NodeTypes';\nimport { setToolType } from './toolsSlice';\nimport Button from '../../shared/Button';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\n\nconst ToolBar = () => {\n    const dispatch = useDispatch();\n    const selected = useSelector(({ tools }) => tools.toolType);\n\n    const boundSetToolType = (toolType) => dispatch(setToolType(toolType));\n\n    return (\n        <div>\n            {toolTypes.map(type => <Button\n                key={type}\n                onClick={() => boundSetToolType(type)}\n                selected={type === selected}\n                style={{\n                    backgroundColor: nodeTypeColor[type],\n                    margin: '.4em'\n                }} />)}\n        </div>\n    );\n}\n\nexport default ToolBar;","import React from 'react';\nimport Button from '../../shared/Button';\nimport { toggleFullscreen } from '../tools/toolsSlice';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\n\nconst FullscreenButton = () => {\n    const dispatch = useDispatch();\n    const fullscreen = useSelector(({ tools }) => tools.fullscreen);\n\n    const boundToggleFullscreen = () => dispatch(toggleFullscreen());\n\n    return (\n        <Button onClick={boundToggleFullscreen}\n            style={{\n                position: 'fixed',\n                left: '.2em',\n                bottom: '.2em',\n                zIndex: '2'\n            }}>{fullscreen ? '❌' : '🔼'}</Button>\n    );\n};\n\nexport default FullscreenButton;","import React from 'react';\nimport Nodes from '../features/nodes/Nodes.jsx';\nimport Container from '../shared/Container';\nimport TitleHeader from '../shared/TitleHeader';\nimport ToolBar from '../features/tools/ToolBar.jsx';\nimport FullscreenButton from '../features/tools/FullscreenButton.jsx';\n\nfunction App() {\n  return (\n    <Container>\n      <TitleHeader>Pathfinding tool</TitleHeader>\n      <ToolBar />\n      <Nodes animationFrameDuration={20} />\n      <FullscreenButton />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport nodesReducer from '../features/nodes/nodesSlice';\nimport mouseReducer from '../features/mouse/mouseSlice';\nimport toolsReducer from '../features/tools/toolsSlice';\n\nconst reducer = {\n  nodes: nodesReducer,\n  mouse: mouseReducer,\n  tools: toolsReducer\n};\n\nconst customizedMiddleware = [];\n\nexport default configureStore({\n  reducer,\n  middleware: customizedMiddleware \n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './app/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}