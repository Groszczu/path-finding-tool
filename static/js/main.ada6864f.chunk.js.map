{"version":3,"sources":["shared/GridContainer.js","shared/Keyframes.js","features/nodes/NodeTypes.js","features/nodes/Node.jsx","features/nodes/nodeHelpers.js","features/nodes/nodesSlice.js","features/nodes/Nodes.jsx","shared/Container.js","shared/TitleHeader.js","shared/Button.js","shared/FullscreenFlexContainer.js","util/algorithms/heuristics.js","util/algorithms/aStar.js","util/algorithms/dijkstra.js","util/algorithms/greedy.js","util/algorithms/algorithmId.js","features/tools/toolsSlice.js","shared/Slider.js","shared/Label.js","shared/InlineFlex.js","features/tools/AnimationSpeedSlider.jsx","features/tools/AlgorithmPicker.jsx","features/tools/ToolBar.jsx","features/tools/FullscreenButton.jsx","features/nodes/usePathfinding.js","features/tools/OperationsPanel.jsx","app/App.js","serviceWorker.js","app/store.js","index.js"],"names":["GridContainer","styled","div","props","columns","rows","GridWrapper","aspectRatio","ResizeWindow","fullscreen","screen","window","width","calculatedWidth","height","css","ResizableGrid","resizeWindowRef","useRef","useEffect","current","style","ref","scaleKeyframe","keyframes","visitedNodeKeyframe","NodeTypes","empty","wall","visited","result","start","end","toolTypes","Set","isToolType","type","has","nodeTypeColor","nodeTypeStyle","Square","span","attrs","delay","gridColumnStart","x","gridRowStart","y","gridColumnEnd","gridRowEnd","transitionDelay","animationDelay","Node","animationFrameTime","onMouseDown","onMouseOver","node","useSelector","nodes","visitedIndex","createNode","areEqual","node1","node2","neighbors","Math","abs","isStartOrEndNode","startNode","endNode","distance","a","b","sqrt","pow","clearNotToolNodes","map","row","pathfindingState","defaultState","cols","Array","fill","_","col","createEmptyNodes","middleY","floor","length","middleX","pathfinding","selectedDrawTool","initNodesState","nodesSlice","createSlice","name","initialState","reducers","changeColumns","state","payload","changeRows","startPathfinding","setNodesType","action","setNodesTypeReady","forEach","stateNode","setNodesTypeRunning","changeSelectedTool","toolType","draw","clearNodes","resetNodes","actions","reducer","changedNode","oldX","oldY","newX","newY","stateNodes","Nodes","mousePressed","dragging","tools","dispatch","useDispatch","changeNodeTypeIfPressed","changeNodeType","rowsIndices","keys","columnsIndices","onMouseDownCapture","e","button","onMouseUp","onContextMenu","preventDefault","key","Container","TitleHeader","h1","Button","primary","children","selected","FullscreenFlexContainer","top","right","left","bottom","zIndex","dijkstraHeuristic","comparer","distanceFromStart","addHeuristics","Infinity","previousNode","currentNode","testedNode","calculatedDistance","min","endCondition","aStartHeuristic","combinedDistance","distanceToEnd","ceil","calculatedDistanceFromStart","calculatedCombinedDistance","greedyHeuristic","Number","MAX_SAFE_INTEGER","isStartNode","basicAStar","heuristic","flatNodes","flat","filter","unvisited","i","sort","shift","push","find","n","aStar","dijkstra","greedy","algorithmId","pathfindingAlgorithm","toolsSlice","toggleFullscreen","changeAnimationFrameTime","changePathfindingAlgorithm","Slider","input","Label","label","InlineFlex","direction","AnimationSpeedSlider","useState","internalAnimationTime","setInternalAnimationTime","isReady","htmlFor","id","value","disabled","max","step","onChange","target","onBlur","Select","select","Option","option","isSelected","AlgorithmPicker","selectedAlgorithm","Object","entries","ToolBar","hovered","setHovered","focused","setFocused","onMouseEnter","onMouseLeave","onFocus","from","aria-label","onClick","backgroundColor","maxWidth","margin","FullscreenButton","document","exitFullscreen","querySelector","requestFullscreen","position","usePathfinding","algorithm","resultTimeout","useCallback","setTimeout","clearTimeout","OperationsPanel","mapAlgorithmIdToFunc","cancel","App","Boolean","location","hostname","match","nodesReducer","toolsReducer","configureStore","middleware","ReactDOM","render","StrictMode","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ada6864f.chunk.js","sourcesContent":["import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { useRef } from 'react';\nimport { useEffect } from 'react';\n\nconst GridContainer = styled.div`\n    display: grid;\n    grid-template-columns: repeat(${props => props.columns}, calc(100% / ${props => props.columns}));\n    grid-template-rows: repeat(${props => props.rows}, calc(100% / ${props => props.rows}));\n    justify-content: center;\n    position: absolute;\n    top: 0;\n\n    margin: 0 auto;\n    user-select: none;\n\n    z-index: 1;\n    width: 100%;\n    height: 100%;\n`;\n\nconst GridWrapper = styled.div`\n  position: relative;\n  padding-bottom: ${props => props.aspectRatio}%;\n  width: 100%;\n`;\n\nconst ResizeWindow = styled.div`\n  margin: 0 auto;\n  min-width: ${props => props.columns * 6}px;\n  max-width: 100%;\n  background: var(--empty-node-clr);\n  border-radius: 10px;\n  overflow: hidden;\n  resize: horizontal;\n  border: 3px solid black;\n  ${props => {\n        if (!props.fullscreen) {\n            return;\n        }\n        const { screen } = window;\n        const { width, height } = screen;\n        const calculatedWidth = height > width ? '100vmin' : `${props.aspectRatio}vmax`;\n        return css`\n            left: calc((100vw - ${calculatedWidth}) / 2);\n            top: 0;\n            position: absolute;\n            max-width: ${calculatedWidth};\n        `;\n    }\n    }\n`;\n\nexport default function ResizableGrid(props) {\n    const resizeWindowRef = useRef(null);\n\n    useEffect(() => {\n        // override resized width on fullscreen toggle\n        resizeWindowRef.current.style.width = '100%';\n    }, [props.fullscreen]);\n\n    const aspectRatio = (props.rows / props.columns) * 100;\n    return (\n        <ResizeWindow ref={resizeWindowRef} fullscreen={props.fullscreen} aspectRatio={aspectRatio} columns={props.columns}>\n            <GridWrapper aspectRatio={aspectRatio}>\n                <GridContainer {...props} />\n            </GridWrapper>\n        </ResizeWindow>);\n};","import { keyframes } from 'styled-components';\n\nexport const scaleKeyframe = keyframes`\n  0% {\n    transform: scale(1.4, 1.4);\n    z-index: 2;\n  }\n  100%{\n    transform: scale(1, 1);\n    z-index: 0;\n  }\n`;\n\nexport const visitedNodeKeyframe = keyframes`\n  0% {\n    background-color: var(--visited-start-clr);\n    transform: scale(0.4, 0.4);\n    border-radius: 100%;\n    z-index: 2;\n  }\n  50% {\n    background-color: var(--visited-progress-clr);\n    transform: scale(1, 1);\n    border-radius: 0;\n    z-index: 2;\n  }\n  100% {\n    background-color: var(--visited-node-clr);\n    z-index: 0;\n  }\n`;\n","import { scaleKeyframe, visitedNodeKeyframe } from \"../../shared/Keyframes\";\nimport { css } from \"styled-components\";\n\nconst NodeTypes = {\n  empty: 'empty_node',\n  wall: 'wall_node',\n  visited: 'visited_node',\n  result: 'result_node',\n  start: 'start_node',\n  end: 'end_node'\n};\n\nexport const changeableTypes = new Set([\n  NodeTypes.empty,\n  NodeTypes.wall,\n  NodeTypes.visited,\n  NodeTypes.result\n]);\n\nexport const toolTypes = new Set([\n  NodeTypes.empty,\n  NodeTypes.wall,\n  NodeTypes.start,\n  NodeTypes.end\n]);\n\nexport function isChangeableType(type) {\n  return changeableTypes.has(type);\n};\n\nexport function isToolType(type) {\n  return toolTypes.has(type);\n} \n\nexport const nodeTypeColor = {\n  [NodeTypes.empty]: 'var(--empty-node-clr)',\n  [NodeTypes.wall]: 'var(--wall-node-clr)',\n  [NodeTypes.visited]: 'var(--visited-node-clr)',\n  [NodeTypes.result]: 'var(--result-node-clr)',\n  [NodeTypes.start]: 'var(--start-node-clr)',\n  [NodeTypes.end]: 'var(--end-node-clr)',\n}\n\nexport const nodeTypeStyle = {\n  [NodeTypes.empty]: '',\n  [NodeTypes.wall]: css`\n    background: ${nodeTypeColor[NodeTypes.wall]};\n    animation: ${scaleKeyframe} .2s linear;`,\n  [NodeTypes.visited]: css`\n    background: ${nodeTypeColor[NodeTypes.visited]};\n    animation: ${visitedNodeKeyframe} 1.4s linear;`,\n  [NodeTypes.result]: css`\n    background: ${nodeTypeColor[NodeTypes.result]};\n    animation: ${scaleKeyframe} .3s linear;\n    transition: background-color .5s;`,\n  [NodeTypes.start]: css`\n    background: ${nodeTypeColor[NodeTypes.start]};\n    box-shadow: 0px 0px 10px 5px rgba(9,135,0,1);\n    z-index: 3`,\n  [NodeTypes.end]: css`\n    background: ${nodeTypeColor[NodeTypes.end]};\n    box-shadow: 0px 0px 10px 5px rgba(252,3,3,1);\n    z-index: 3`,\n};\n\n\nexport default NodeTypes;","import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { nodeTypeStyle } from './NodeTypes';\n\nconst Square = styled.span.attrs(({ delay, x, y }) => ({\n    style: {\n        gridColumnStart: x + 1,\n        gridRowStart: y + 1,\n        gridColumnEnd: 'span 1',\n        gridRowEnd: 'span 1',\n        transitionDelay: `${delay}ms`,\n        animationDelay: `${delay}ms`\n    }\n}))`\n    width: fill;\n    height: fill;\n    border: 1px solid var(--secondary-clr);\n\n    ${props => nodeTypeStyle[props.type]}\n`;\n\nconst Node = ({ animationFrameTime, x, y, onMouseDown, onMouseOver }) => {\n    const node = useSelector(({nodes}) => nodes.nodes[y][x]);\n    return (\n        <Square\n            delay={node.visitedIndex * animationFrameTime}\n            type={node.type}\n            x={node.x}\n            y={node.y}\n            onMouseDown={() => onMouseDown(node)}\n            onMouseOver={() => onMouseOver(node)}\n        />\n    );\n};\n\nexport default Node;","import NodeTypes, { isChangeableType, isToolType } from './NodeTypes';\n\nexport function createEmptyNodes(cols, rows) {\n  return Array(rows).fill(0).map((_, row) =>\n    Array(cols).fill(0).map((_, col) => createNode(col, row)));\n}\n\nexport function createNode(x, y, type = NodeTypes.empty) {\n  return { x, y, type, visitedIndex: null };\n}\n\nexport function areEqual(node1, node2) {\n  if (!node1 || !node2) {\n    return false;\n  }\n  return node1.x === node2.x && node1.y === node2.y;\n}\n\nexport function neighbors(node1, node2) {\n  const xDistance = Math.abs(node1.x - node2.x);\n  const yDistance = Math.abs(node1.y - node2.y);\n  return xDistance + yDistance === 1;\n}\n\nexport function validateNodeTypeChange(node, newType) {\n  return validateNodeChange(node) && isChangeableType(newType);\n\n}\nexport function validateNodeChange(node) {\n  return !node.type === NodeTypes.start && !node.type === NodeTypes.end;\n}\n\nexport function isStartOrEndNode(node, startNode, endNode) {\n  return areEqual(node, startNode) || areEqual(node, endNode);\n}\n\nexport function distance(a, b) {\n  return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\n}\n\nexport function clearNotToolNodes(nodes) {\n  return nodes.map(row => row.map(node => {\n    if (!isToolType(node.type)) {\n      return createNode(node.x ,node.y, NodeTypes.empty);\n    }\n    return node;\n  }));\n}","import { createSlice } from '@reduxjs/toolkit';\nimport { createEmptyNodes, isStartOrEndNode, clearNotToolNodes } from './nodeHelpers';\nimport NodeTypes, { isToolType } from './NodeTypes';\n\n\n// Default state\nconst COLS = 40;\nconst ROWS = 30;\n\nexport const pathfindingState = {\n    ready: 'ready',\n    running: 'running',\n    done: 'done'\n};\n\nfunction initNodesState(cols, rows) {\n    const nodes = createEmptyNodes(cols, rows);\n    const middleY = Math.floor(nodes.length / 2);\n    const middleX = Math.floor(nodes[0].length / 2);\n\n    const startNode = { y: middleY, x: middleX };\n    const endNode = { y: Math.floor(middleY / 2), x: middleX };\n    nodes[startNode.y][startNode.x].type = NodeTypes.start;\n    nodes[endNode.y][endNode.x].type = NodeTypes.end;\n\n    return {\n        columns: cols,\n        rows,\n        nodes,\n        startNode,\n        endNode,\n        pathfinding: pathfindingState.ready,\n        selectedDrawTool: NodeTypes.wall,\n    };\n}\n\nconst defaultState = initNodesState(COLS, ROWS);\n\nconst nodesSlice = createSlice({\n    name: 'nodesMetadata',\n    initialState: defaultState,\n    reducers: {\n        changeColumns: (state, { payload }) => { state.columns = payload; },\n        changeRows: (state, { payload }) => { state.rows = payload; },\n        startPathfinding: (state) => {\n            if (state.pathfinding === pathfindingState.ready) {\n                state.pathfinding = pathfindingState.running;\n            }\n        },\n        setNodesType: (state, action) => {\n            switch (state.pathfinding) {\n                case pathfindingState.ready: setNodesTypeReady(state, action); break;\n                case pathfindingState.running: setNodesTypeRunning(state, action); break;\n                case pathfindingState.done: break;\n                default: break;\n            }\n        },\n        changeSelectedTool: (state, { payload }) => {\n            const toolType = payload;\n            if (!isToolType(toolType)) {\n                return;\n            }\n            state.selectedDrawTool = toolType;\n        },\n        draw: (state, action) => {\n            if (state.pathfinding === pathfindingState.running) {\n                return;\n            }\n            if (state.pathfinding === pathfindingState.done) {\n                state.nodes = clearNotToolNodes(state.nodes);\n                state.pathfinding = pathfindingState.ready;\n            }\n            action.payload.type = state.selectedDrawTool;\n            setNodesTypeReady(state, action);\n        },\n        clearNodes: (state) => {\n            state.nodes = clearNotToolNodes(state.nodes);\n            state.pathfinding = pathfindingState.ready;\n        },\n        resetNodes: () => defaultState\n    }\n});\n\nconst { actions, reducer } = nodesSlice;\nexport const {\n    changeColumns,\n    changeRows,\n    startPathfinding,\n    setNodesType,\n    changeSelectedTool,\n    draw,\n    clearNodes,\n    resetNodes,\n} = actions;\nexport default reducer;\n\n\nfunction setNodesTypeReady(state, { payload }) {\n    const { nodes, type } = payload;\n    const { startNode, endNode } = state;\n\n    switch (type) {\n        case NodeTypes.start:\n        case NodeTypes.end: {\n            // there can only be one start and one end node\n            if (nodes.length !== 1) {\n                return;\n            }\n\n            const node = nodes[0];\n            if (isStartOrEndNode(node, startNode, endNode)) {\n                return;\n            }\n\n            const changedNode = type === NodeTypes.start ? startNode : endNode;\n\n            const { x: oldX, y: oldY } = changedNode;\n            state.nodes[oldY][oldX].type = NodeTypes.empty;\n\n            const { x: newX, y: newY } = node;\n\n            changedNode.x = newX;\n            changedNode.y = newY;\n            state.nodes[newY][newX].type = type;\n            break;\n        }\n        case NodeTypes.empty:\n        case NodeTypes.wall: {\n            const { nodes: stateNodes } = state;\n            nodes.forEach(node => {\n                if (isStartOrEndNode(node, startNode, endNode)) {\n                    return;\n                }\n                stateNodes[node.y][node.x].type = type;\n            });\n            break;\n        }\n        default: break;\n    }\n}\n\nfunction setNodesTypeRunning(state, { payload }) {\n    const { nodes, type } = payload;\n    const { startNode, endNode } = state;\n\n    switch (type) {\n        case NodeTypes.visited:\n        case NodeTypes.result: {\n            nodes.forEach(node => {\n                if (isStartOrEndNode(node, startNode, endNode)) {\n                    return;\n                }\n                const stateNode = state.nodes[node.y][node.x];\n                stateNode.type = type;\n                stateNode.visitedIndex = node.visitedIndex;\n\n                if (type === NodeTypes.result) {\n                    state.pathfinding = pathfindingState.done;\n                }\n            });\n            break;\n        }\n        default: break;\n    }\n}","import React, { useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport GridContainer from '../../shared/GridContainer';\nimport Node from './Node';\nimport { draw, changeSelectedTool } from './nodesSlice';\nimport NodeTypes from './NodeTypes';\n\nconst Nodes = () => {\n    const mousePressed = useRef(false);\n    const dragging = useRef(false);\n\n    const columns = useSelector(({ nodes }) => nodes.columns);\n    const rows = useSelector(({ nodes }) => nodes.rows);\n\n    const animationFrameTime = useSelector(({ tools }) => tools.animationFrameTime);\n    const fullscreen = useSelector(({ tools }) => tools.fullscreen);\n\n    const dispatch = useDispatch();\n\n    const changeNodeTypeIfPressed = (node) => {\n        if (!mousePressed.current) return;\n        changeNodeType(node);\n    };\n    const changeNodeType = (node) => {\n        if (node.type === NodeTypes.start || node.type === NodeTypes.end) {\n            dispatch(changeSelectedTool(node.type));\n            dragging.current = true;\n        }\n        dispatch(draw({ nodes: [node] }));\n    }\n\n    const handleMouseDown = (e) => {\n        // right click\n        if (e.button === 2) {\n            dispatch(changeSelectedTool(NodeTypes.empty));\n        }\n        mousePressed.current = true;\n    };\n    const handleMouseUp = (e) => {\n        mousePressed.current = false;\n        switch (e.button) {\n            case 0: //left click\n                // if left click is released\n                // and it was dragging start/end note\n                // set draw tool to wall type\n                dragging.current && dispatch(changeSelectedTool(NodeTypes.wall));\n                dragging.current = false;\n                break;\n            case 2: //right click\n                // if right click is released set draw tool to wall type\n                dispatch(changeSelectedTool(NodeTypes.wall));\n                break\n            default: break;\n        }\n    }\n    const rowsIndices = [...Array(rows).keys()];\n    const columnsIndices = [...Array(columns).keys()];\n    return (\n        <GridContainer fullscreen={fullscreen} columns={columns} rows={rows}\n            onMouseDownCapture={handleMouseDown}\n            onMouseUp={handleMouseUp}\n            onContextMenu={(e) => e.preventDefault()}\n        >\n            {\n                rowsIndices.map(y =>\n                    columnsIndices.map(x =>\n                        <Node\n                            key={`${x}_${y}`}\n                            x={x}\n                            y={y}\n                            animationFrameTime={animationFrameTime}\n                            onMouseDown={changeNodeType}\n                            onMouseOver={changeNodeTypeIfPressed}\n                        />\n                    )\n                )\n            }\n        </GridContainer>\n    );\n};\n\nexport default Nodes;","import styled from 'styled-components';\n\nconst Container = styled.div`\n  margin: 0 auto;\n  width: 60%;\n  max-width: 1920px;\n  text-align: center;\n  border-radius: 10px;\n  \n  @media (max-width: 1024px) {\n    width: 80%;\n  }\n\n  @media (max-width: 425px) {\n    width: 95%;\n  }\n\n  @media (max-width: 320px) {\n    width: 100%;\n  }\n`;\n\nexport default Container;","import styled from 'styled-components';\n\nconst TitleHeader = styled.h1`\n  font-size: 3rem;\n  color: var(--text-clr);\n  -webkit-text-stroke: 2px black;\n  margin-bottom: .2em;\n`;\n\nexport default TitleHeader;","import styled, { css } from 'styled-components';\n\nconst Button = styled.button`\n  border-radius: 10px;\n  background-color: ${props => props.primary ? 'var(--primary-clr)' : 'var(--secondary-clr)'};\n  font-size: var(--clamped-font-size);\n  color: var(--light-text-clr);\n  padding: ${props => props.children ? '.5em .75em' : '.75em'};\n  text-align: center;\n  margin: .4rem;\n  border: 2px solid black;\n  cursor: pointer;\n  opacity: 0.6;\n  transition: opacity 0.25s, transform 0.25s;\n\n  ${\n    props => props.selected && css`\n      opacity: 1;\n      transform: scale(1.2, 1.2);\n      border-color: var(--secondary-clr);\n    `\n  }\n\n  :hover {\n    opacity: 1;\n  }\n\n`;\n\nexport default Button;","import styled, { css } from 'styled-components';\n\nconst FullscreenFlexContainer = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    flex: 1 1 300px;\n    font-size: var(--clamped-font-size);\n    padding: .4em;\n    margin: .8em 0;\n    color: var(--light-text-clr);\n    border-radius: 10px;\n    background-color: var(--light-background-clr);\n    border: 3px solid black;\n\n    justify-content: space-evenly;\n    align-items: center;\n    > * { \n        margin: 0;\n    }\n\n    ${\n    props =>\n        props.fullscreen && css`> * { width: 100%; margin: 0; }\n                                > * + * { margin-top: .4em; }\n                                flex-direction: column;\n                                position: fixed;\n                                top: ${props.top};\n                                right: ${props.right};\n                                left: ${props.left};\n                                bottom: ${props.bottom};\n                                z-index: ${props.zIndex};\n                                margin: .4rem;`\n    }\n`;\n\nexport default FullscreenFlexContainer;","import NodeTypes from '../../features/nodes/NodeTypes';\nimport { neighbors, distance } from '../../features/nodes/nodeHelpers';\n\nexport const dijkstraHeuristic = {\n    comparer: (a, b) => a.distanceFromStart - b.distanceFromStart,\n    addHeuristics: (nodes, startNode, endNode) => nodes.map(node => ({\n        ...node,\n        distanceFromStart: node.type === NodeTypes.start ? 0 : Infinity,\n        previousNode: null\n    })),\n    map: (currentNode, testedNode) => {\n        const calculatedDistance = currentNode.distanceFromStart + 1;\n        return neighbors(currentNode, testedNode) ?\n            {\n                ...testedNode,\n                distanceFromStart: Math.min(testedNode.distanceFromStart, calculatedDistance),\n                previousNode: testedNode.distanceFromStart > calculatedDistance ? currentNode : testedNode.previousNode\n            }\n            :\n            testedNode;\n    },\n    endCondition: (currentNode) => currentNode.distanceFromStart === Infinity\n};\n\nexport const aStartHeuristic = {\n    comparer: (a, b) => a.combinedDistance - b.combinedDistance,\n    addHeuristics: (nodes, startNode, endNode) => nodes.map(node => {\n        const isStartNode = node.type === NodeTypes.start;\n        const distanceFromStart = isStartNode ? 0 : Infinity;\n        const distanceToEnd = Math.ceil(distance(node, endNode));\n        return {\n            ...node,\n            distanceFromStart,\n            distanceToEnd,\n            combinedDistance: distanceFromStart + distanceToEnd,\n            previousNode: null\n        }\n    }),\n    map: (currentNode, testedNode) => {\n        const calculatedDistanceFromStart = currentNode.distanceFromStart + 1;\n        const calculatedCombinedDistance = calculatedDistanceFromStart + testedNode.distanceToEnd;\n        return neighbors(currentNode, testedNode) ?\n            {\n                ...testedNode,\n                distanceFromStart: Math.min(testedNode.distanceFromStart, calculatedDistanceFromStart),\n                combinedDistance: Math.min(testedNode.combinedDistance, calculatedCombinedDistance),\n                previousNode: testedNode.distanceFromStart > calculatedCombinedDistance ? currentNode : testedNode.previousNode\n            }\n            :\n            testedNode;\n    },\n    endCondition: (currentNode) => currentNode.combinedDistance === Infinity\n}\n\nexport const greedyHeuristic = {\n    comparer: (a, b) => {\n        const aMetric = a.visited ? a.distanceToEnd : Number.MAX_SAFE_INTEGER;\n        const bMetric = b.visited ? b.distanceToEnd : Number.MAX_SAFE_INTEGER;\n        return aMetric - bMetric;\n    },\n    addHeuristics: (nodes, startNode, endNode) => nodes.map(node => {\n        const isStartNode = node.type === NodeTypes.start;\n        const distanceToEnd = Math.ceil(distance(node, endNode));\n        return {\n            ...node,\n            distanceToEnd,\n            visited: isStartNode,\n            previousNode: null\n        }\n    }),\n    map: (currentNode, testedNode) => {\n        return neighbors(currentNode, testedNode)\n            ? {\n                ...testedNode,\n                visited: true,\n                previousNode: currentNode\n            }\n            : testedNode;\n    },\n    endCondition: (currentNode) => !currentNode.visited\n}","import NodeTypes from \"../../features/nodes/NodeTypes\";\nimport { aStartHeuristic } from \"./heuristics\";\n\nexport function basicAStar(nodes, startNode, endNode, heuristic) {\n\n    const visited = [];\n    const flatNodes = nodes.flat().filter(node => node.type !== NodeTypes.wall);\n\n    let unvisited = heuristic.addHeuristics(flatNodes, startNode, endNode);\n\n    for (let i = 0; unvisited.length !== 0; i++) {\n        unvisited.sort(heuristic.comparer);\n        const currentNode = unvisited[0];\n\n        // if lowest distance from start node in unvisited array equals Infinity\n        // it means there is no path from start to end, so we can end searching\n        if (heuristic.endCondition(currentNode)) {\n            return { visited, result: null };\n        }\n\n        unvisited.shift(); //remove current node\n        unvisited = unvisited.map(node =>\n            heuristic.map(currentNode, node)\n        );\n\n        visited.push({ ...currentNode, visitedIndex: i });\n        if (currentNode.type === NodeTypes.end) {\n            break;\n        }\n    }\n\n    const result = [];\n    const endNodeData = visited.find(n => n.type === NodeTypes.end);\n    for (let i = 0, node = endNodeData.previousNode; node?.type !== NodeTypes.start; node = node.previousNode, i++) {\n        if (!node) {\n            return { visited, result };\n        }\n        result.push({ ...node, visitedIndex: i });\n    }\n\n    return { visited, result };\n}\n\nexport default function aStar(nodes, startNode, endNode) {\n    return basicAStar(nodes, startNode, endNode, aStartHeuristic);\n}","import { basicAStar } from \"./aStar\";\nimport { dijkstraHeuristic } from \"./heuristics\";\n\nexport default function dijkstra(nodes, startNode, endNode) {\n  return basicAStar(nodes, startNode, endNode, dijkstraHeuristic);\n}","import { basicAStar } from \"./aStar\";\nimport { greedyHeuristic } from \"./heuristics\";\n\nexport default function greedy(nodes, startNode, endNode) {\n    return basicAStar(nodes, startNode, endNode, greedyHeuristic);\n}","import aStar from \"./aStar\";\nimport dijkstra from \"./dijkstra\";\nimport greedy from \"./greedy\";\n\nconst algorithmId = {\n    dijkstra: 'Dijkstra\\'s',\n    aStar: 'A*',\n    greedy: 'Greedy'\n};\n\nexport function mapAlgorithmIdToFunc(id) {\n    switch (id) {\n        case algorithmId.dijkstra: return dijkstra;\n        case algorithmId.aStar: return aStar;\n        case algorithmId.greedy: return greedy;\n        default: return;\n    }\n}\n\nexport default algorithmId;","import { createSlice } from '@reduxjs/toolkit';\nimport algorithmId from '../../util/algorithms/algorithmId';\n\nconst initialState = {\n  fullscreen: false,\n  animationFrameTime: 20,\n  pathfindingAlgorithm: algorithmId.dijkstra\n};\n\nconst toolsSlice = createSlice({\n  name: 'tools',\n  initialState,\n  reducers: {\n    toggleFullscreen: (state) => { state.fullscreen = !state.fullscreen; },\n    changeAnimationFrameTime: (state, { payload }) => { state.animationFrameTime = payload; },\n    changePathfindingAlgorithm: (state, { payload }) => { state.pathfindingAlgorithm = payload; }\n  }\n});\n\nconst { reducer, actions } = toolsSlice;\nexport const { toggleFullscreen, changeAnimationFrameTime, changePathfindingAlgorithm } = actions;\nexport default reducer;","import styled from 'styled-components';\n\nconst Slider = styled.input.attrs(() => ({\n  type: 'range',\n}))`\n  width: 90%;\n  padding: .4em;\n`;\n\nexport default Slider;","import styled from 'styled-components';\n\nconst Label = styled.label`\n    color: var(--light-text-clr);\n`;\n\nexport default Label;","import styled from 'styled-components';\n\nconst InlineFlex = styled.span`\n    display: inline-flex;\n    flex-direction: ${props => props.direction};\n    justify-content: center;\n    align-items: center;\n    max-width: 450px;\n    max-hight: 100%;\n    font-size: var(--clamped-font-size);\n    flex: 1 1 60px;\n`;\n\nexport default InlineFlex;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { changeAnimationFrameTime } from './toolsSlice';\nimport { pathfindingState } from '../nodes/nodesSlice';\nimport Slider from '../../shared/Slider';\nimport Label from '../../shared/Label';\nimport InlineFlex from '../../shared/InlineFlex';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n\nconst AnimationSpeedSlider = () => {\n    const animationFrameTime = useSelector(({ tools }) => tools.animationFrameTime);\n    const state = useSelector(({ nodes }) => nodes.pathfinding);\n    const dispatch = useDispatch();\n    const [internalAnimationTime, setInternalAnimationTime] = useState(animationFrameTime);\n\n    useEffect(() => {\n        setInternalAnimationTime(animationFrameTime);\n    }, [animationFrameTime]);\n\n    const handleChange = (e) => {\n        setInternalAnimationTime(e.target.value);\n    }\n    const handleBlur = () => {\n        internalAnimationTime !== animationFrameTime && dispatch(changeAnimationFrameTime(internalAnimationTime))\n    }\n\n    const isReady = state === pathfindingState.ready;\n    return (\n        <InlineFlex direction='column'>\n            <Label htmlFor={'animation-speed-range'}>Animation: {internalAnimationTime}ms</Label>\n            <Slider\n                id={'animation-speed-range'}\n                value={internalAnimationTime}\n                disabled={!isReady}\n                min={0}\n                max={250}\n                step={10}\n                onChange={handleChange}\n                onBlur={handleBlur}\n            />\n        </InlineFlex>\n    );\n};\n\nexport default AnimationSpeedSlider;","import React from 'react';\nimport algorithmId from '../../util/algorithms/algorithmId';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changePathfindingAlgorithm } from './toolsSlice';\nimport styled from 'styled-components';\nimport InlineFlex from '../../shared/InlineFlex';\nimport Label from '../../shared/Label';\n\nconst Select = styled.select`\n    width: 90%;\n    color: var(--text-clr);\n    border-radius: 5px;\n    border: 3px solid black;\n    font-size: inherit;\n    padding: .2em .4em;\n    background-color: var(--empty-node-clr);\n`;\n\nconst Option = styled.option`\n    background-color: ${props => props.isSelected ? 'var(--empty-node-clr)' : 'var(--background-clr)'};\n`;\n\nconst AlgorithmPicker = () => {\n    const selectedAlgorithm = useSelector(({ tools }) => tools.pathfindingAlgorithm);\n    const dispatch = useDispatch();\n    const handleChange = (e) => {\n        dispatch(changePathfindingAlgorithm(e.target.value));\n    }\n    return (\n        <InlineFlex direction='column'>\n            <Label htmlFor={'algorithm-select'}>Algorithm</Label>\n            <Select id={'algorithm-select'} onChange={handleChange} value={selectedAlgorithm}>\n                {Object.entries(algorithmId).map(([key, value]) =>\n                    <Option key={key} value={value} isSelected={selectedAlgorithm === value}>{value}</Option>)}\n            </Select>\n        </InlineFlex>\n    );\n};\n\nexport default AlgorithmPicker;","import React from 'react';\nimport { toolTypes, nodeTypeColor } from '../nodes/NodeTypes';\nimport { changeSelectedTool } from '../nodes/nodesSlice';\nimport Button from '../../shared/Button';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport FullscreenFlexContainer from '../../shared/FullscreenFlexContainer';\nimport AnimationSpeedSlider from './AnimationSpeedSlider';\nimport { useState } from 'react';\nimport AlgorithmPicker from './AlgorithmPicker';\nimport InlineFlex from '../../shared/InlineFlex';\n\nconst ToolBar = () => {\n    const dispatch = useDispatch();\n    const [hovered, setHovered] = useState(false);\n    const [focused, setFocused] = useState(false);\n    const selected = useSelector(({ nodes }) => nodes.selectedDrawTool);\n    const fullscreen = useSelector(({ tools }) => tools.fullscreen);\n\n    const boundSetToolType = (toolType) => dispatch(changeSelectedTool(toolType));\n\n    return (\n        <FullscreenFlexContainer\n            fullscreen={fullscreen}\n            top={0} right={0}\n            zIndex={100}\n            onMouseEnter={fullscreen ? () => setHovered(true) : null}\n            onMouseLeave={fullscreen ? () => setHovered(false) : null}\n            onFocus={fullscreen ? () => setFocused(true) : null}\n            onBlur={fullscreen ? () => setFocused(false) : null}\n        >\n            {!fullscreen || hovered || focused\n                ? <>\n                    <InlineFlex>\n                        {Array.from(toolTypes).map(type => <Button aria-label={`${type} button`}\n                            key={type}\n                            onClick={() => boundSetToolType(type)}\n                            selected={type === selected}\n                            style={{\n                                backgroundColor: nodeTypeColor[type],\n                                maxWidth: '.75em',\n                                margin: '.2em',\n                            }} />)}\n                    </InlineFlex>\n                    <AnimationSpeedSlider />\n                    <AlgorithmPicker />\n                </>\n                : <Button\n                    selected={true}\n                    style={{\n                        backgroundColor: nodeTypeColor[selected],\n                        maxWidth: '.75em',\n                        margin: '.2em .4em',\n                    }}\n                />\n            }\n        </FullscreenFlexContainer>\n    );\n}\n\nexport default ToolBar;","import React from 'react';\nimport Button from '../../shared/Button';\nimport { toggleFullscreen } from '../tools/toolsSlice';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\n\nconst FullscreenButton = () => {\n    const dispatch = useDispatch();\n    const fullscreen = useSelector(({ tools }) => tools.fullscreen);\n\n    const boundToggleFullscreen = () => {\n        if (fullscreen) {\n            document.fullscreen && document.exitFullscreen();\n        } else {\n            document.querySelector('body').requestFullscreen();\n        }\n        dispatch(toggleFullscreen());\n    }\n\n    return (\n        <Button onClick={boundToggleFullscreen}\n            style={{\n                position: 'fixed',\n                maxWidth: 'none',\n                left: 0,\n                bottom: 0,\n                zIndex: '2'\n            }}>{fullscreen ? '❌' : '🔼'}</Button>\n    );\n};\n\nexport default FullscreenButton;","import { useCallback, useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport NodeTypes from \"./NodeTypes\";\nimport { setNodesType, startPathfinding } from \"./nodesSlice\";\n\nconst usePathfinding = (nodes, startNode, endNode, algorithm, animationFrameTime) => {\n    const dispatch = useDispatch();\n    const resultTimeout = useRef(null);\n\n    const pathfinding = useCallback(() => {\n        dispatch(startPathfinding());\n        const { visited, result } = algorithm(nodes, startNode, endNode);\n        visited && dispatch(setNodesType({ nodes: visited, type: NodeTypes.visited }));\n        if (result) {\n            resultTimeout.current = setTimeout(() =>\n                dispatch(setNodesType({\n                    nodes: result,\n                    type: NodeTypes.result,\n                })\n                )\n                , animationFrameTime * visited.length);\n        }\n    }, [algorithm, nodes, startNode, endNode, animationFrameTime, dispatch]);\n\n    const cancel = useCallback(() => clearTimeout(resultTimeout.current), [resultTimeout]);\n\n    return [pathfinding, cancel];\n};\n\nexport default usePathfinding;","import React from 'react';\nimport Button from '../../shared/Button';\nimport FullscreenFlexContainer from '../../shared/FullscreenFlexContainer';\nimport { clearNodes, resetNodes } from '../nodes/nodesSlice';\nimport usePathfinding from '../nodes/usePathfinding';\nimport { useDispatch } from 'react-redux';\nimport { pathfindingState } from '../nodes/nodesSlice';\nimport { useSelector } from 'react-redux';\nimport { mapAlgorithmIdToFunc } from '../../util/algorithms/algorithmId';\n\nconst OperationsPanel = () => {\n    const fullscreen = useSelector(({ tools }) => tools.fullscreen);\n\n    const nodes = useSelector(({ nodes }) => nodes.nodes);\n    const startNode = useSelector(({ nodes }) => nodes.startNode);\n    const endNode = useSelector(({ nodes }) => nodes.endNode);\n    const state = useSelector(({ nodes }) => nodes.pathfinding);\n    const algorithmId = useSelector(({ tools }) => tools.pathfindingAlgorithm);\n    const animationFrameTime = useSelector(({ tools }) => tools.animationFrameTime);\n\n    const dispatch = useDispatch();\n\n    const algorithm = mapAlgorithmIdToFunc(algorithmId);\n    const [pathfinding, cancel] = usePathfinding(nodes, startNode, endNode, algorithm, animationFrameTime)\n\n    const startOnClick = () => pathfinding();\n    const clearOnClick = () => { cancel(); dispatch(clearNodes()); };\n    const resetOnClick = () => { cancel(); dispatch(resetNodes()); };\n\n    return (\n        <FullscreenFlexContainer fullscreen={fullscreen} bottom={0} right={0} zIndex={99}>\n            {\n                state === pathfindingState.ready\n                    ? <Button onClick={startOnClick} primary={false}>Start</Button>\n                    : <Button onClick={clearOnClick} primary={true}>Clear</Button>\n            }\n            <Button onClick={resetOnClick} primary={true}>Reset</Button>\n        </FullscreenFlexContainer>\n    );\n};\n\nexport default OperationsPanel;","import React from 'react';\nimport Nodes from '../features/nodes/Nodes.jsx';\nimport Container from '../shared/Container';\nimport TitleHeader from '../shared/TitleHeader';\nimport ToolBar from '../features/tools/ToolBar.jsx';\nimport FullscreenButton from '../features/tools/FullscreenButton.jsx';\nimport OperationsPanel from '../features/tools/OperationsPanel.jsx';\nimport { useSelector } from 'react-redux';\n\nfunction App() {\n  const fullscreen = useSelector(({ tools }) => tools.fullscreen);\n  return (\n    <Container>\n      {fullscreen || <TitleHeader>Pathfinding tool</TitleHeader>}\n      <ToolBar />\n      <Nodes />\n      <OperationsPanel />\n      <FullscreenButton />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport nodesReducer from '../features/nodes/nodesSlice';\nimport toolsReducer from '../features/tools/toolsSlice';\n\nconst reducer = {\n  nodes: nodesReducer,\n  tools: toolsReducer\n};\n\nconst customizedMiddleware = [];\n\nexport default configureStore({\n  reducer,\n  middleware: customizedMiddleware \n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './app/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}