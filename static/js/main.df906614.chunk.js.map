{"version":3,"sources":["shared/GridContainer.js","shared/Keyframes.js","features/nodes/NodeTypes.js","features/nodes/Node.jsx","features/nodes/nodeHelpers.js","features/nodes/nodesSlice.js","features/nodes/Nodes.jsx","shared/Container.js","shared/TitleHeader.js","shared/Button.js","shared/FullscreenFlexContainer.js","features/tools/ToolBar.jsx","features/tools/toolsSlice.js","features/tools/FullscreenButton.jsx","features/nodes/usePathfinding.js","util/algorithms/dijkstra.js","features/tools/OperationsPanel.jsx","app/App.js","serviceWorker.js","app/store.js","index.js"],"names":["GridContainer","styled","div","props","columns","css","rows","fullscreen","screen","window","nodesOnShorterDimension","width","height","nodeSize","scaleKeyframe","keyframes","visitedNodeKeyframe","NodeTypes","empty","wall","visited","result","start","end","toolTypes","Set","isToolType","type","has","nodeTypeColor","nodeTypeStyle","Square","span","attrs","delay","style","gridColumnStart","x","gridRowStart","y","gridColumnEnd","gridRowEnd","transitionDelay","animationDelay","Node","animationFrameDuration","onMouseDown","onMouseOver","node","useSelector","nodes","visitedIndex","createEmptyNodes","cols","Array","fill","map","_","row","col","createNode","areEqual","node1","node2","isStartOrEndNode","startNode","endNode","pathfindingState","defaultState","middleY","Math","floor","length","middleX","pathfinding","selectedDrawTool","initNodesState","nodesSlice","createSlice","name","initialState","reducers","changeColumns","state","payload","changeRows","startPathfinding","setNodesType","action","setNodesTypeReady","forEach","stateNode","i","setNodesTypeRunning","changeSelectedTool","toolType","draw","clearNodes","resetNodes","actions","reducer","changedNode","oldX","oldY","newX","newY","stateNodes","Nodes","mousePressed","useRef","tools","dispatch","useDispatch","changeNodeTypeIfPressed","current","changeNodeType","rowsIndices","keys","columnsIndices","onMouseUp","key","bind","Container","TitleHeader","h1","Button","button","primary","children","selected","FullscreenFlexContainer","top","right","left","bottom","ToolBar","from","onClick","backgroundColor","maxWidth","margin","toolsSlice","toggleFullscreen","FullscreenButton","position","zIndex","usePathfinding","algorithm","resultTimeout","useCallback","setTimeout","cancel","clearTimeout","dijkstra","unvisited","flat","filter","distance","Infinity","previousNode","sort","a","b","currentNode","shift","abs","min","push","find","n","OperationsPanel","text","App","Boolean","location","hostname","match","nodesReducer","toolsReducer","configureStore","middleware","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df906614.chunk.js","sourcesContent":["import styled, { css } from 'styled-components';\n\nconst GridContainer = styled.div`\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(22px, 1fr));\n    grid-template-rows: repeat(auto-fill, minmax(22px, 1fr));\n    justify-content: center;\n\n    margin: 0 auto;\n    padding: 10px;\n    overflow: auto;\n    background: var(--empty-node-clr);\n    border-radius: 10px;\n    border: 3px solid black;\n    user-select: none;\n\n    z-index: 1;\n\n    ${\n    props => props.columns &&\n        css`grid-template-columns: repeat(${props.columns}, 25px);`\n    }\n\n    ${\n    props => props.rows &&\n        css`grid-template-rows: repeat(${props.rows}, 25px);`\n    }\n\n    ${\n    props => {\n        if (!props.fullscreen) {\n            return;\n        }\n        const { screen } = window;\n        const { width, height } = screen;\n        const nodesOnShorterDimension = width > height ? props.rows : props.columns;\n        const nodeSize = `calc(100vmin / ${nodesOnShorterDimension})`;\n\n        return css`\n            grid-template-columns: repeat(${props.columns}, ${nodeSize});\n            grid-template-rows: repeat(${props.rows}, ${nodeSize});\n            border: none;\n            overflow: hidden;\n            position: absolute;\n            padding: 0;\n            left: 0;\n            top: 0;\n            height: 100vh;\n            width: 100vw;`\n    }\n    }\n`;\n\nexport default GridContainer;","import { keyframes } from 'styled-components';\n\nexport const scaleKeyframe = keyframes`\n  0% {\n    transform: scale(1.4, 1.4);\n    z-index: 2;\n  }\n  100%{\n    transform: scale(1, 1);\n    z-index: 0;\n  }\n`;\n\nexport const visitedNodeKeyframe = keyframes`\n  0% {\n    background-color: var(--visit-progress-clr);\n    transform: scale(1.4, 1.4);\n    border-radius: 100%;\n    z-index: 2;\n  }\n  100% {\n    background-color: var(--visited-node-clr);\n    transform: scale(1, 1);\n    border-radius: 0;\n    z-index: 0;\n  }\n`;\n","import { scaleKeyframe, visitedNodeKeyframe } from \"../../shared/Keyframes\";\nimport { css } from \"styled-components\";\n\nconst NodeTypes = {\n  empty: 'empty_node',\n  wall: 'wall_node',\n  visited: 'visited_node',\n  result: 'result_node',\n  start: 'start_node',\n  end: 'end_node'\n};\n\nexport const changeableTypes = new Set([\n  NodeTypes.empty,\n  NodeTypes.wall,\n  NodeTypes.visited,\n  NodeTypes.result\n]);\n\nexport const toolTypes = new Set([\n  NodeTypes.empty,\n  NodeTypes.wall,\n  NodeTypes.start,\n  NodeTypes.end\n]);\n\nexport function isChangeableType(type) {\n  return changeableTypes.has(type);\n};\n\nexport function isToolType(type) {\n  return toolTypes.has(type);\n} \n\nexport const nodeTypeColor = {\n  [NodeTypes.empty]: 'var(--empty-node-clr)',\n  [NodeTypes.wall]: 'var(--wall-node-clr)',\n  [NodeTypes.visited]: 'var(--visited-node-clr)',\n  [NodeTypes.result]: 'var(--result-node-clr)',\n  [NodeTypes.start]: 'var(--start-node-clr)',\n  [NodeTypes.end]: 'var(--end-node-clr)',\n}\n\nexport const nodeTypeStyle = {\n  [NodeTypes.empty]: '',\n  [NodeTypes.wall]: css`\n    background: ${nodeTypeColor[NodeTypes.wall]};\n    animation: ${scaleKeyframe} .2s linear;`,\n  [NodeTypes.visited]: css`\n    background: ${nodeTypeColor[NodeTypes.visited]};\n    animation: ${visitedNodeKeyframe} .3s linear;`,\n  [NodeTypes.result]: css`\n    background: ${nodeTypeColor[NodeTypes.result]};\n    animation: ${scaleKeyframe} .3s linear;\n    transition: background-color .5s;`,\n  [NodeTypes.start]: css`\n    background: ${nodeTypeColor[NodeTypes.start]};\n    box-shadow: 0px 0px 10px 5px rgba(9,135,0,1);\n    z-index: 3`,\n  [NodeTypes.end]: css`\n    background: ${nodeTypeColor[NodeTypes.end]};\n    box-shadow: 0px 0px 10px 5px rgba(252,3,3,1);\n    z-index: 3`,\n};\n\n\nexport default NodeTypes;","import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { nodeTypeStyle } from './NodeTypes';\n\nconst Square = styled.span.attrs(({ delay, x, y }) => ({\n    style: {\n        gridColumnStart: x + 1,\n        gridRowStart: y + 1,\n        gridColumnEnd: 'span 1',\n        gridRowEnd: 'span 1',\n        transitionDelay: `${delay}ms`,\n        animationDelay: `${delay}ms`\n    }\n}))`\n    width: fill;\n    height: fill;\n    border: 1px solid var(--secondary-clr);\n\n    ${props => nodeTypeStyle[props.type]}\n`;\n\nconst Node = ({ animationFrameDuration, x, y, onMouseDown, onMouseOver }) => {\n    const node = useSelector(({nodes}) => nodes.nodes[y][x]);\n    return (\n        <Square\n            delay={node.visitedIndex * animationFrameDuration}\n            type={node.type}\n            x={node.x}\n            y={node.y}\n            onMouseDown={onMouseDown}\n            onMouseOver={onMouseOver}\n        />\n    );\n};\n\nexport default Node;","import NodeTypes, { isChangeableType } from './NodeTypes';\n\nexport function createEmptyNodes(cols, rows) {\n  return Array(rows).fill(0).map((_, row) =>\n    Array(cols).fill(0).map((_, col) => createNode(col, row)));\n}\n\nexport function createNode(x, y, type = NodeTypes.empty) {\n  return { x, y, type, visitedIndex: null };\n}\n\nexport function areEqual(node1, node2) {\n  if (!node1 || !node2) {\n    return false;\n  }\n  return node1.x === node2.x && node1.y === node2.y;\n}\n\nexport function neighbors(node1, node2) {\n  const xDistance = Math.abs(node1.x - node2.x);\n  const yDistance = Math.abs(node1.y - node2.y);\n  return xDistance + yDistance === 1;\n}\n\nexport function validateNodeTypeChange(node, newType) {\n  return validateNodeChange(node) && isChangeableType(newType);\n\n}\nexport function validateNodeChange(node) {\n  return !node.type === NodeTypes.start && !node.type === NodeTypes.end;\n}\n\nexport function isStartOrEndNode(node, startNode, endNode) {\n  return areEqual(node, startNode) || areEqual(node, endNode);\n}","import { createSlice } from '@reduxjs/toolkit';\nimport { createEmptyNodes, isStartOrEndNode } from './nodeHelpers';\nimport NodeTypes, { isToolType } from './NodeTypes';\n\n\n// Default state\nconst COLS = 40;\nconst ROWS = 30;\n\nexport const pathfindingState = {\n    ready: 'ready',\n    running: 'running',\n    done: 'done'\n};\n\nfunction initNodesState(cols, rows) {\n    const nodes = createEmptyNodes(cols, rows);\n    const middleY = Math.floor(nodes.length / 2);\n    const middleX = Math.floor(nodes[0].length / 2);\n\n    const startNode = { y: middleY, x: middleX };\n    const endNode = { y: Math.floor(middleY / 2), x: middleX };\n    nodes[startNode.y][startNode.x].type = NodeTypes.start;\n    nodes[endNode.y][endNode.x].type = NodeTypes.end;\n\n    return {\n        columns: cols,\n        rows,\n        nodes,\n        startNode,\n        endNode,\n        pathfinding: pathfindingState.ready,\n        selectedDrawTool: NodeTypes.wall,\n        animationFrameDuration: 20\n    };\n}\n\nconst defaultState = initNodesState(COLS, ROWS);\n\nconst nodesSlice = createSlice({\n    name: 'nodesMetadata',\n    initialState: defaultState,\n    reducers: {\n        changeColumns: (state, { payload }) => { state.columns = payload; },\n        changeRows: (state, { payload }) => { state.rows = payload; },\n        startPathfinding: (state) => {\n            if (state.pathfinding === pathfindingState.ready) {\n                state.pathfinding = pathfindingState.running;\n            }\n        },\n        setNodesType: (state, action) => {\n            switch (state.pathfinding) {\n                case pathfindingState.ready: setNodesTypeReady(state, action); break;\n                case pathfindingState.running: setNodesTypeRunning(state, action); break;\n                case pathfindingState.done: break;\n                default: break;\n            }\n        },\n        changeSelectedTool: (state, { payload }) => {\n            const toolType = payload;\n            if (!isToolType(toolType)) {\n                return;\n            }\n            state.selectedDrawTool = toolType;\n        },\n        draw: (state, action) => {\n            if (state.pathfinding !== pathfindingState.ready) {\n                return;\n            }\n            action.payload.type = state.selectedDrawTool;\n            setNodesTypeReady(state, action);\n        },\n        clearNodes: (state) => {\n            const { nodes } = state;\n            nodes.forEach(row => row.forEach(node => {\n                if (!isToolType(node.type)) {\n                    node.type = NodeTypes.empty;\n                }\n                node.visitedIndex = null;\n            }));\n            state.pathfinding = pathfindingState.ready;\n        },\n        resetNodes: () => defaultState\n    }\n});\n\nconst { actions, reducer } = nodesSlice;\nexport const {\n    changeColumns,\n    changeRows,\n    startPathfinding,\n    setNodesType,\n    changeSelectedTool,\n    draw,\n    clearNodes,\n    resetNodes,\n} = actions;\nexport default reducer;\n\n\nfunction setNodesTypeReady(state, { payload }) {\n    const { nodes, type } = payload;\n    const { startNode, endNode } = state;\n\n    switch (type) {\n        case NodeTypes.start:\n        case NodeTypes.end: {\n            // there can only be one start and one end node\n            if (nodes.length !== 1) {\n                return;\n            }\n\n            const node = nodes[0];\n            if (isStartOrEndNode(node, startNode, endNode)) {\n                return;\n            }\n\n            const changedNode = type === NodeTypes.start ? startNode : endNode;\n\n            const { x: oldX, y: oldY } = changedNode;\n            state.nodes[oldY][oldX].type = NodeTypes.empty;\n\n            const { x: newX, y: newY } = node;\n\n            changedNode.x = newX;\n            changedNode.y = newY;\n            state.nodes[newY][newX].type = type;\n            break;\n        }\n        case NodeTypes.empty:\n        case NodeTypes.wall: {\n            const { nodes: stateNodes } = state;\n            nodes.forEach(node => {\n                if (isStartOrEndNode(node, startNode, endNode)) {\n                    return;\n                }\n                stateNodes[node.y][node.x].type = type;\n            });\n            break;\n        }\n        default: break;\n    }\n}\n\nfunction setNodesTypeRunning(state, { payload }) {\n    const { nodes, type } = payload;\n    const { startNode, endNode } = state;\n\n    switch (type) {\n        case NodeTypes.visited: {\n            nodes.forEach(node => {\n                if (isStartOrEndNode(node, startNode, endNode)) {\n                    return;\n                }\n                const stateNode = state.nodes[node.y][node.x];\n                stateNode.type = NodeTypes.visited;\n                stateNode.visitedIndex = node.visitedIndex;\n            });\n            break;\n        }\n        case NodeTypes.result: {\n            nodes.forEach((node, i) => {\n                if (isStartOrEndNode(node, startNode, endNode)) {\n                    return;\n                }\n                const stateNode = state.nodes[node.y][node.x];\n                stateNode.type = NodeTypes.result;\n                stateNode.visitedIndex = i;\n            });\n            state.pathfinding = pathfindingState.done;\n            break;\n        }\n        default: break;\n    }\n}","import React, { useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport GridContainer from '../../shared/GridContainer';\nimport Node from './Node';\nimport { draw } from './nodesSlice';\n\nconst Nodes = ({ animationFrameDuration }) => {\n    const mousePressed = useRef(false);\n    const columns = useSelector(({ nodes }) => nodes.columns);\n    const rows = useSelector(({ nodes }) => nodes.rows);\n    const fullscreen = useSelector(({ tools }) => tools.fullscreen);\n\n    const dispatch = useDispatch();\n\n    const changeNodeTypeIfPressed = (node) => {\n        if (!mousePressed.current) return;\n        changeNodeType(node);\n    };\n    const changeNodeType = (node) =>\n        dispatch(draw({ nodes: [node] }));\n\n    const rowsIndices = [...Array(rows).keys()];\n    const columnsIndices = [...Array(columns).keys()];\n    return (\n        <GridContainer fullscreen={fullscreen} columns={columns} rows={rows}\n            onMouseDown={() => mousePressed.current = true}\n            onMouseUp={() => mousePressed.current = false}>\n            {\n                rowsIndices.map(y =>\n                    columnsIndices.map(x =>\n                        (<Node\n                            key={`${x}_${y}`}\n                            x={x}\n                            y={y}\n                            animationFrameDuration={animationFrameDuration}\n                            onMouseDown={changeNodeType.bind(null, { x, y })}\n                            onMouseOver={changeNodeTypeIfPressed.bind(null, { x, y })} />)\n                    )\n                )\n            }\n        </GridContainer>\n    );\n};\n\nexport default Nodes;","import styled from 'styled-components';\n\nconst Container = styled.div`\n  margin: 0 auto;\n  width: 90%;\n  max-width: 1100px;\n  text-align: center;\n  border-radius: 10px;\n`;\n\nexport default Container;","import styled from 'styled-components';\n\nconst TitleHeader = styled.h1`\n  font-size: 3rem;\n  color: var(--text-clr);\n  -webkit-text-stroke: 2px black;\n`;\n\nexport default TitleHeader;","import styled, { css } from 'styled-components';\n\nconst Button = styled.button`\n  border-radius: 10px;\n  background-color: ${props => props.primary ? 'var(--primary-clr)' : 'var(--secondary-clr)'};\n  font-size: 1.5rem;\n  color: var(--light-txt-clr);\n  padding: ${props => props.children ? '.5em .75em' : '.75em'};\n  text-align: center;\n  max-width: 100px;\n  margin: 2% auto 0 auto;\n  border: 2px solid black;\n  cursor: pointer;\n  opacity: 0.6;\n  transition: opacity 0.25s, transform 0.25s;\n\n  ${\n    props => props.selected && css`\n      opacity: 1;\n      transform: scale(1.2, 1.2);\n      border-color: var(--secondary-clr);\n    `\n  }\n\n  :hover {\n    opacity: 1;\n  }\n\n`;\n\nexport default Button;","import styled, { css } from 'styled-components';\n\nconst FullscreenFlexContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    > * {\n        width: 100%;\n        margin: .4em;\n    }\n    ${\n    props =>\n        props.fullscreen && css`> * { margin-bottom: 0.4em }\n                                flex-direction: column;\n                                position: fixed;\n                                top: ${props.top};\n                                right: ${props.right};\n                                left: ${props.left};\n                                bottom: ${props.bottom};\n                                z-index: 2;`\n    }\n`;\n\nexport default FullscreenFlexContainer;","import React from 'react';\nimport { toolTypes, nodeTypeColor } from '../nodes/NodeTypes';\nimport { changeSelectedTool } from '../nodes/nodesSlice';\nimport Button from '../../shared/Button';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport FullscreenFlexContainer from '../../shared/FullscreenFlexContainer';\n\nconst ToolBar = () => {\n    const dispatch = useDispatch();\n    const selected = useSelector(({ nodes }) => nodes.selectedDrawTool);\n    const fullscreen = useSelector(({ tools }) => tools.fullscreen);\n\n    const boundSetToolType = (toolType) => dispatch(changeSelectedTool(toolType));\n\n    return (\n        <FullscreenFlexContainer fullscreen={fullscreen} top={0} right={'-1px'}>\n            {Array.from(toolTypes).map(type => <Button\n                key={type}\n                onClick={() => boundSetToolType(type)}\n                selected={type === selected}\n                style={{\n                    backgroundColor: nodeTypeColor[type],\n                    maxWidth: '.75em',\n                    margin: '.2em .4em',\n                }} />)}\n        </FullscreenFlexContainer>\n    );\n}\n\nexport default ToolBar;","import { createSlice } from '@reduxjs/toolkit';\nimport NodeTypes from '../nodes/NodeTypes';\n\nconst initialState = {\n  toolType: NodeTypes.wall,\n  fullscreen: false\n};\n\nconst toolsSlice = createSlice({\n  name: 'tools',\n  initialState,\n  reducers: {\n    toggleFullscreen: (state) => { state.fullscreen = !state.fullscreen }\n  }\n});\n\nconst { reducer, actions } = toolsSlice;\nexport const { toggleFullscreen } = actions;\nexport default reducer;","import React from 'react';\nimport Button from '../../shared/Button';\nimport { toggleFullscreen } from '../tools/toolsSlice';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\n\nconst FullscreenButton = () => {\n    const dispatch = useDispatch();\n    const fullscreen = useSelector(({ tools }) => tools.fullscreen);\n\n    const boundToggleFullscreen = () => dispatch(toggleFullscreen());\n\n    return (\n        <Button onClick={boundToggleFullscreen}\n            style={{\n                position: 'fixed',\n                left: 0,\n                bottom: 0,\n                margin: '.4em',\n                zIndex: '2'\n            }}>{fullscreen ? '❌' : '🔼'}</Button>\n    );\n};\n\nexport default FullscreenButton;","import { useCallback, useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport NodeTypes from \"./NodeTypes\";\nimport { setNodesType, startPathfinding } from \"./nodesSlice\";\n\nconst usePathfinding = (nodes, algorithm, animationFrameDuration = 20) => {\n    const dispatch = useDispatch();\n    const resultTimeout = useRef(null);\n\n    const pathfinding = useCallback(() => {\n        dispatch(startPathfinding());\n        const { visited, result } = algorithm(nodes);\n        visited && dispatch(setNodesType({ nodes: visited, type: NodeTypes.visited }));\n        if (result) {\n            resultTimeout.current = setTimeout(() =>\n                dispatch(setNodesType({\n                    nodes: result,\n                    type: NodeTypes.result,\n                })\n                )\n                , animationFrameDuration * visited.length);\n        }\n    }, [algorithm, nodes, animationFrameDuration, dispatch]);\n\n    const cancel = useCallback(() => clearTimeout(resultTimeout.current), [resultTimeout]);\n\n    return [pathfinding, cancel];\n};\n\nexport default usePathfinding;","import { neighbors } from \"../../features/nodes/nodeHelpers\";\nimport NodeTypes from \"../../features/nodes/NodeTypes\";\n\nexport default function dijkstra(nodes) {\n\n  const visited = [];\n  let unvisited = nodes\n    .flat()\n    .filter(node => node.type !== NodeTypes.wall)\n    .map(node => ({\n    ...node,\n    distance: node.type === NodeTypes.start ? 0 : Infinity,\n    previousNode: null\n  }));\n\n  let i = 0;\n  for (; unvisited.length !== 0; i++) {\n    unvisited.sort((a, b) => a.distance - b.distance);\n    const currentNode = unvisited[0];\n    \n    // if lowest distance from start node in unvisited array equals Infinity\n    // it means there is no path from start to end, so we can end searching\n    if (currentNode.distance === Infinity) {\n      return { visited, result: null };\n    }\n\n    unvisited.shift(); //remove current node\n    unvisited = unvisited.map(node => {\n      return neighbors(currentNode, node) ?\n        {\n          ...node,\n          distance: Math.min(node.distance, currentNode.distance + 1), \n          previousNode: node.distance > currentNode.distance + 1 ? currentNode : node.previousNode\n        }\n        :\n        node;\n    });\n\n    visited.push({ ...currentNode, visitedIndex: i });\n    if (currentNode.type === NodeTypes.end) {\n      break;\n    }\n  }\n\n  const result = [];\n  const endNodeData = visited.find(n => n.type === NodeTypes.end);\n  for (let node = endNodeData.previousNode; node.type !== NodeTypes.start; node = node.previousNode ) {\n    result.push(node);\n  }\n\n  return { visited, result };\n}","import React from 'react';\nimport Button from '../../shared/Button';\nimport FullscreenFlexContainer from '../../shared/FullscreenFlexContainer';\nimport { clearNodes, resetNodes } from '../nodes/nodesSlice';\nimport usePathfinding from '../nodes/usePathfinding';\nimport dijkstra from '../../util/algorithms/dijkstra';\nimport { useDispatch } from 'react-redux';\nimport { pathfindingState } from '../nodes/nodesSlice';\nimport { useSelector } from 'react-redux';\n\nconst OperationsPanel = () => {\n    const fullscreen = useSelector(({ tools }) => tools.fullscreen);\n\n    const nodes = useSelector(({ nodes }) => nodes.nodes);\n    const animationFrameDuration = useSelector(({ nodes }) => nodes.animationFrameDuration);\n    const state = useSelector(({ nodes }) => nodes.pathfinding);\n\n    const dispatch = useDispatch();\n    const [pathfinding, cancel] = usePathfinding(nodes, dijkstra, animationFrameDuration)\n    const startOnClick = () => pathfinding();\n    const clearOnClick = () => { cancel(); dispatch(clearNodes()); };\n    const resetOnClick = () => { cancel(); dispatch(resetNodes()); };\n\n    let onClick;\n    let text;\n    let primary = false;\n    if (state === pathfindingState.ready) {\n        onClick = startOnClick;\n        text = 'Start';\n    } else {\n        onClick = clearOnClick;\n        text = 'Clear';\n        primary = true;\n    }\n\n    return (\n        <FullscreenFlexContainer fullscreen={fullscreen} bottom={0} right={0}>\n            <Button onClick={onClick} primary={primary}>{text}</Button>\n            <Button onClick={resetOnClick} primary={true}>Reset</Button>\n        </FullscreenFlexContainer>\n    );\n};\n\nexport default OperationsPanel;","import React from 'react';\nimport Nodes from '../features/nodes/Nodes.jsx';\nimport Container from '../shared/Container';\nimport TitleHeader from '../shared/TitleHeader';\nimport ToolBar from '../features/tools/ToolBar.jsx';\nimport FullscreenButton from '../features/tools/FullscreenButton.jsx';\nimport OperationsPanel from '../features/tools/OperationsPanel.jsx';\n\nfunction App() {\n  return (\n    <Container>\n      <TitleHeader>Pathfinding tool</TitleHeader>\n      <ToolBar />\n      <Nodes animationFrameDuration={20} />\n      <OperationsPanel />\n      <FullscreenButton />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport nodesReducer from '../features/nodes/nodesSlice';\nimport toolsReducer from '../features/tools/toolsSlice';\n\nconst reducer = {\n  nodes: nodesReducer,\n  tools: toolsReducer\n};\n\nconst customizedMiddleware = [];\n\nexport default configureStore({\n  reducer,\n  middleware: customizedMiddleware \n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './app/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}